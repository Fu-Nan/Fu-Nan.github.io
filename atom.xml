<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FuNan</title>
  <icon>https://www.gravatar.com/avatar/3f6a4005adc8f8749f606bc69cb330b6</icon>
  
  <link href="http://www.ifunan.cn/atom.xml" rel="self"/>
  
  <link href="http://www.ifunan.cn/"/>
  <updated>2020-10-05T14:08:04.796Z</updated>
  <id>http://www.ifunan.cn/</id>
  
  <author>
    <name>FuNan</name>
    <email>1186174184@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker容器存储和网络基础</title>
    <link href="http://www.ifunan.cn/2020/10/05/Docker_%E5%AE%B9%E5%99%A8%E5%AD%98%E5%82%A8%E5%92%8C%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.ifunan.cn/2020/10/05/Docker_%E5%AE%B9%E5%99%A8%E5%AD%98%E5%82%A8%E5%92%8C%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</id>
    <published>2020-10-05T14:07:59.000Z</published>
    <updated>2020-10-05T14:08:04.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="容器存储和网络基础"><a href="#容器存储和网络基础" class="headerlink" title="容器存储和网络基础"></a>容器存储和网络基础</h1><h2 id="开启Harbor"><a href="#开启Harbor" class="headerlink" title="开启Harbor"></a>开启Harbor</h2><ol><li>虚拟机重启后需要手动开启Harbor,并重启docker生效<br><code>docker-compose start</code><br><code>systemctl restart docker.service</code></li><li>或者可以设置Harbor为开机自启动<br><code>vim harbor.service </code>在文件中添加以下内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Redis</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">[Service]</span><br><span class="line">ExecStart&#x3D; &#x2F;usr&#x2F;bin&#x2F;docker-compose start</span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure></li></ol><h2 id="Docker-compose部署GitLab"><a href="#Docker-compose部署GitLab" class="headerlink" title="Docker-compose部署GitLab"></a>Docker-compose部署GitLab</h2><ol><li>新建gitlab安装目录<br><code>mkdir /usr/local/gitlab/</code><br><code>cd /usr/local/gitlab/</code></li><li>新建配置文件<br><code>vi docker-compose.yml</code>并添加以下内容(注意IP改为你的IP和配置项的缩进格式)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">version: &#39;3&#39;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    image: &#39;twang2218&#x2F;gitlab-ce-zh&#39;</span><br><span class="line">    restart: always</span><br><span class="line">    hostname: &#39;192.168.200.120&#39;</span><br><span class="line">    environment:</span><br><span class="line">      TZ: &#39;Asia&#x2F;Shanghai&#39;</span><br><span class="line">      GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">        external_url &#39;http:&#x2F;&#x2F;192.168.200.120&#39;</span><br><span class="line">        gitlab_rails[&#39;gitlab_shell_ssh_port&#39;] &#x3D; 2222</span><br><span class="line">        unicorn[&#39;port&#39;] &#x3D; 8888</span><br><span class="line">        nginx[&#39;listen_port&#39;] &#x3D; 80</span><br><span class="line">    ports:</span><br><span class="line">      - &#39;80:80&#39;          </span><br><span class="line">      - &#39;443:443&#39;          </span><br><span class="line">      - &#39;2222:22&#39;          </span><br><span class="line">    volumes:    </span><br><span class="line">      - .&#x2F;config:&#x2F;etc&#x2F;gitlab</span><br><span class="line">      - .&#x2F;data:&#x2F;var&#x2F;opt&#x2F;gitlab</span><br><span class="line">      - .&#x2F;logs:&#x2F;var&#x2F;log&#x2F;gitlab</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/10/05/0tM8OJ.png"></li><li>创建gitlab所需使用的相关目录(此步骤可忽略，也可将上边配置文件的volumes选项修改为此路径)<br><code>mkdir /opt/gitlab/&#123;config,data,logs&#125; -p</code></li><li>拉取gitlab中文版镜像<br><code>docker pull twang2218/gitlab-ce-zh</code></li><li>查看镜像是否拉取成功<br><code>docker images</code></li><li>启动gitlab的容器<br><code>docker-compose up -d</code></li><li>查看容器是否正常运行<br><code>docker ps -a</code><br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/10/05/0tMmoq.png"></li><li>设置gitlab开机启动(第二句echo需设置成你自己的安装目录下)<br><code>chmod +x /etc/rc.local</code><br><code>echo &quot;cd /usr/local/gitlab &amp;&amp; docker-compose up -d&quot; &gt;&gt; /etc/rc.local</code></li></ol><h2 id="GitLab相关操作"><a href="#GitLab相关操作" class="headerlink" title="GitLab相关操作"></a>GitLab相关操作</h2><h3 id="GitLab创建项目"><a href="#GitLab创建项目" class="headerlink" title="GitLab创建项目"></a>GitLab创建项目</h3><ol><li>浏览器输入IP地址,第一次访问需设置密码(账户名：root)<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/10/05/0tMuF0.png"></li><li>新建一个项目,项目名称随意填写，设置好后点击<code>create project</code>创建项目<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/10/05/0tM1lF.png"><br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/10/05/0tMKYV.png"></li><li>创建好项目后如下图所示，点击按钮复制项目ssh地址，之后会用到<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/10/05/0tMlSU.png"></li></ol><h3 id="添加密钥"><a href="#添加密钥" class="headerlink" title="添加密钥"></a>添加密钥</h3><ol><li>在Linux中生成密钥<br><code>ssh-keygen</code></li><li>进入文件复制ssh密钥<br><code>vim /root/.ssh/id_rsa.pub</code></li><li>回到浏览器点击右边的头像——设置<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/10/05/0tM3y4.png"></li><li>将复制的密钥添加到gitlab中,点击<code>Add key</code>添加密钥<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/10/05/0tMJm9.png"></li></ol><h3 id="Git上传代码到Gitlab仓库"><a href="#Git上传代码到Gitlab仓库" class="headerlink" title="Git上传代码到Gitlab仓库"></a>Git上传代码到Gitlab仓库</h3><ol><li>移动到任意一个目录下，克隆远程仓库到本地,仓库地址为上边复制过的SSH地址<br><code>cd /root</code><br><code>git clone 你的仓库地址</code><br><code>cd 仓库名称</code></li><li>上传代码到GitLab(操作与Windows里上传到Github操作一样),以下操作省略详细步骤<br><code>git add .</code><br><code>git commit -m &quot;1.0.0&quot;</code><br><code>git push origin master</code></li><li>推送代码后再次查看浏览器上的GitLab仓库,可看见上传成功的结果</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;容器存储和网络基础&quot;&gt;&lt;a href=&quot;#容器存储和网络基础&quot; class=&quot;headerlink&quot; title=&quot;容器存储和网络基础&quot;&gt;&lt;/a&gt;容器存储和网络基础&lt;/h1&gt;&lt;h2 id=&quot;开启Harbor&quot;&gt;&lt;a href=&quot;#开启Harbor&quot; class=&quot;</summary>
      
    
    
    
    <category term="Docker" scheme="http://www.ifunan.cn/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://www.ifunan.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker(三)应用容器化</title>
    <link href="http://www.ifunan.cn/2020/09/24/Docker_%E5%BA%94%E7%94%A8%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    <id>http://www.ifunan.cn/2020/09/24/Docker_%E5%BA%94%E7%94%A8%E5%AE%B9%E5%99%A8%E5%8C%96/</id>
    <published>2020-09-24T00:26:57.000Z</published>
    <updated>2020-09-24T07:06:20.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应用容器化"><a href="#应用容器化" class="headerlink" title="应用容器化"></a>应用容器化</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>安装Docker编排工具docker-compose(Harbor依赖该服务)<br><code>yum -y install epel-release.noarch</code><br><code>yum makecache fast</code><br><code>yum -y install docker-compose.noarch</code></p></li><li><p>解压harbor安装包(将包传至目录后再解压)<br><code>tar -zxvf harbor-offline-installer-v2.0.1.tgz</code></p></li><li><p>关闭防火墙和Selinux<br><code>systemctl stop firewalld.service</code><br><code>setenforce 0</code></p></li><li><p>关闭防火墙后需要重启docker，不然会报错<br><code>systemctl restart docker.service</code></p></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li>进入目录<br><code>cd harbor/</code></li><li>备份主配置文件<br><code>cp harbor.yml.tmpl harbor.yml</code></li><li>进入配置文件(将文件里的<code>hostname</code>值修改为<code>hostname: 你的IP地址</code>)<br><code>vi harbor.yml</code></li><li>注释掉https相关的内容,全部配置如下图所示<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/23/wxdTSA.png"></li><li>保存修改后安装Harbor服务<br><code>./install.sh</code></li><li>查看Harbor的状态<br><code>docker-compose ps</code></li><li>在浏览器访问,<code>http://你的IP地址</code>,默认账号admin,密码Harbor12345<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/23/wxw7h4.png"></li></ol><h2 id="Harbor操作"><a href="#Harbor操作" class="headerlink" title="Harbor操作"></a>Harbor操作</h2><ol><li>进入网页后新建一个项目<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/23/wxB6Qs.png"></li><li>修改docker配置文件,添加以下内容(注意红圈处有一个逗号)<br><code>&quot;insecure-registries&quot;:[&quot;你的ip地址&quot;]</code><br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/24/0SSXP1.png"></li><li>重启docker<br><code>systemctl restart docker</code></li><li>登录自建的Harbor镜像仓库(账号密码为登录网页的密码)<br><code>docker login 你的IP地址</code></li><li>使用tag更改一个镜像<br><code>docker tag choerodon/cibase:latest 你的IP地址/刚才新建项目的名称/choerodon</code><blockquote><p>例子：<code>docker tag choerodon/cibase:latest 192.168.200.120/test/choerodon</code></p></blockquote></li><li>将镜像推送到仓库<br><code>docker push 你的IP地址/刚才新建项目的名称/choerodon</code><blockquote><p>例子：<code>docker push 192.168.200.120/test/choerodon</code></p></blockquote></li><li>下载镜像<br><code>docker pull 你的IP地址/刚才新建项目的名称/choerodon:latest</code><blockquote><p>例子：<code>docker pull 192.168.200.120/test/choerodon:latest</code></p></blockquote></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;应用容器化&quot;&gt;&lt;a href=&quot;#应用容器化&quot; class=&quot;headerlink&quot; title=&quot;应用容器化&quot;&gt;&lt;/a&gt;应用容器化&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安</summary>
      
    
    
    
    <category term="Docker" scheme="http://www.ifunan.cn/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://www.ifunan.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker(二)常用操作</title>
    <link href="http://www.ifunan.cn/2020/09/17/Docker_%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.ifunan.cn/2020/09/17/Docker_%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-09-16T16:11:23.000Z</published>
    <updated>2020-09-24T02:31:28.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker常用操作"><a href="#Docker常用操作" class="headerlink" title="Docker常用操作"></a>Docker常用操作</h1><p>1、查询docker镜像<br><code>docker search choerodon/cibase</code><br>参数说明:<br>-s 10：列出收藏数不小于10的镜像<br>–no-trunc：显示完整镜像描述<br>–automated：只列出automated build类型的镜像<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/w2bnsS.jpg"><br>例2：查询nginx镜像<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/w2buqg.jpg"></p><blockquote><p>详解：<br><strong>NAME</strong>：镜像仓库源的名称<br><strong>DESCRIPTION</strong>：镜像的描述<br><strong>STARS</strong>：点赞、喜欢数(类似Github的star)<br><strong>AUTOMATED</strong>：是否支持自动构建</p></blockquote><p>2、下载镜像<br><code>docker pull choerodon/cibase</code><br>参数说明：<br>-a：拉取所有目标镜像(即拉去含有名字的所有镜像)<br>–disable-content-trust：忽略镜像的校验,默认开启<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/w2bmM8.jpg"></p><p>3、查看所有镜像<br><code>docker images</code><br>参数说明：<br>-a：列出本地所有镜像(包括中间映像层,默认是过滤掉的)<br>–digests：显示镜像摘要信息<br>–no-trunc：显示完整镜像信息<br>-q：只显示镜像ID<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/w2bVRP.jpg"></p><blockquote><p>详解：<br><strong>REPOSITORY</strong>：镜像名称<br><strong>TAG</strong>：镜像的标签<br><strong>IMAGE ID</strong>：镜像ID<br><strong>CREATED</strong>：镜像创建时间<br><strong>SIZE</strong>：镜像大小</p></blockquote><p>4、创建并运行一个容器<br><code>docker run -tid choerodon/cibase:latest</code><br>参数说明：<br>-d：后台运行并返回容器ID<br>-i：交互模式运行容器,通常与-t连用<br>-t：为容器重新分配一个伪输入终端,通常与-i连用<br>–name=”youName”：指定容器名称<br>-p：指定端口映射,格式：主机端口：容器端口<br>-v：建立本地路径到容器路径的映射，格式：/本地路径：/容器内路径<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/w2bEGt.jpg"></p><p>5、查看正在运行的容器<br><code>docker ps -a</code><br>参数说明：<br>-a：显示所用容器，包括未运行的<br>-l：显示最近创建的容器<br>-n：列出最近创建的n个容器<br>-s：显示总的文件大小<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/w2bZxf.jpg"></p><blockquote><p>详解：<br><strong>CONTAINER ID</strong>：容器ID<br><strong>IMAGE</strong>：使用的镜像<br><strong>COMMAND</strong>：启动容器时运行的命令<br><strong>CREATED</strong>：容器创建时间<br><strong>PORTS</strong>: 容器的端口信息和使用的连接类型(tcp/udp)<br><strong>NAMES</strong>: 自动分配的容器名称<br><strong>STATUS</strong>：容器状态<br>有7种状态：<br>created（已创建）<br>restarting（重启中）<br>running（运行中）<br>removing（迁移中）<br>paused（暂停）<br>exited（停止）<br>dead（死亡）</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker常用操作&quot;&gt;&lt;a href=&quot;#Docker常用操作&quot; class=&quot;headerlink&quot; title=&quot;Docker常用操作&quot;&gt;&lt;/a&gt;Docker常用操作&lt;/h1&gt;&lt;p&gt;1、查询docker镜像&lt;br&gt;&lt;code&gt;docker search ch</summary>
      
    
    
    
    <category term="Docker" scheme="http://www.ifunan.cn/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://www.ifunan.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker(一)安装</title>
    <link href="http://www.ifunan.cn/2020/09/10/Docker_%E5%AE%89%E8%A3%85/"/>
    <id>http://www.ifunan.cn/2020/09/10/Docker_%E5%AE%89%E8%A3%85/</id>
    <published>2020-09-10T03:05:32.000Z</published>
    <updated>2020-09-24T02:31:27.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><ol><li>删除已安装的Docker<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">docker-client \</span><br><span class="line">docker-client-latest \</span><br><span class="line">docker-common \</span><br><span class="line">docker-latest \</span><br><span class="line">docker-latest-logrotate \</span><br><span class="line">docker-logrotate \</span><br><span class="line">docker-selinux \</span><br><span class="line">docker-engine-selinux \</span><br><span class="line">docker-engine</span><br></pre></td></tr></table></figure></li><li>配置阿里云Docker Yum源<br><code>yum install -y yum-utils device-mapper-persistent-data lvm2</code><br><code>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></li><li>查看Docker版本<br><code>yum list docker-ce --showduplicates</code></li><li>安装较旧版本（需要指定完整的 rpm 包的包名，并且加上–setopt=obsoletes=0 参数）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y --setopt&#x3D;obsoletes&#x3D;0 \</span><br><span class="line">docker-ce-17.03.2.ce-1.el7.centos.x86_64 \</span><br><span class="line">docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch</span><br></pre></td></tr></table></figure></li><li>安装Docker最新版本(最新版本不需要指定版本号)<br><code>yum install docker-ce</code></li><li>启动Docker服务<br><code>systemctl enable docker</code><br><code>systemctl start docker</code></li></ol><h2 id="Docker添加阿里云镜像加速器"><a href="#Docker添加阿里云镜像加速器" class="headerlink" title="Docker添加阿里云镜像加速器"></a>Docker添加阿里云镜像加速器</h2><h3 id="配置阿里云加速器"><a href="#配置阿里云加速器" class="headerlink" title="配置阿里云加速器"></a>配置阿里云加速器</h3><ol><li>登录<a href="https://www.aliyun.com/">阿里云</a>右上角登录或注册<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/10/wGQL90.jpg"></li><li>在搜索栏输入<strong>容器镜像服务</strong><br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/10/wGQO3V.jpg"></li><li>找到<strong>容器镜像服务</strong>，点击<strong>立即开通</strong><br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/10/wGQXcT.jpg"></li><li>点击进入后，找到下方的<strong>镜像加速器</strong>并点击<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/10/wGQbhq.jpg"></li><li>点击后即可看见加速器地址，复制后继续后边的步骤即可<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/10/wG3s74.jpg"></li></ol><h3 id="将加速器配置到docker的daemon-json文件中"><a href="#将加速器配置到docker的daemon-json文件中" class="headerlink" title="将加速器配置到docker的daemon.json文件中"></a>将加速器配置到docker的daemon.json文件中</h3><ol><li>编辑daemon.json(新建)<br><code>vim /etc/docker/daemon.json</code></li><li>设置加速器地址<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line"> &quot;registry-mirrors&quot;: [&quot;你的加速器地址&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>最后重新加载重启Docker<br><code>systemctl daemon-reload</code><br><code>systemctl restart docker</code></li><li>测试Docker是否安装成功<br><code>docker -h</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker安装&quot;&gt;&lt;a href=&quot;#Docker安装&quot; class=&quot;headerlink&quot; title=&quot;Docker安装&quot;&gt;&lt;/a&gt;Docker安装&lt;/h1&gt;&lt;h2 id=&quot;安装Docker&quot;&gt;&lt;a href=&quot;#安装Docker&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Docker" scheme="http://www.ifunan.cn/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://www.ifunan.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Shell通配符</title>
    <link href="http://www.ifunan.cn/2020/05/21/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4_ShellTable/"/>
    <id>http://www.ifunan.cn/2020/05/21/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4_ShellTable/</id>
    <published>2020-05-21T04:27:12.000Z</published>
    <updated>2020-08-30T09:48:52.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shell通配符"><a href="#Shell通配符" class="headerlink" title="Shell通配符"></a>Shell通配符</h1><h2 id="Shell常用通配符"><a href="#Shell常用通配符" class="headerlink" title="Shell常用通配符"></a>Shell常用通配符</h2><table><thead><tr><th align="center">字符</th><th align="center">含义</th><th align="left">实例</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">匹配0或多个字符</td><td align="left">a*b,表示a与b之间可以有任意长度的任意字符，也可以一个都没有,如aabcb、axyzb、a012b、ab</td></tr><tr><td align="center">?</td><td align="center">匹配任意一个字符</td><td align="left">a?b,表示a与b之间必须也只能有一个字符,可以是任意字符,如aab、abb、acb、a0b</td></tr><tr><td align="center">[list]</td><td align="center">匹配list中的任意单一字符</td><td align="left">a[xyz]b,表示a与b之间必须也只能有一个字符,但只能是x或y或z,如:axb、ayb、azb</td></tr><tr><td align="center">[!list]</td><td align="center">匹配除list中的任意单一字符</td><td align="left">a[!0-9],表示a与b之间必须也只能有一个字符,但不能是阿拉伯数字,如axb、aab、a-b</td></tr><tr><td align="center">[c1-c2]</td><td align="center">匹配c1-c2中的任意单一字符,如：[0-9][a-z]</td><td align="left">a[0-9]b,表示0与9之间必须也只能有一个字符如a0b、a1b、a9b</td></tr><tr><td align="center">{string1,string2}</td><td align="center">匹配string1或string2（或更多）其一字符串</td><td align="left">a{abc,xyz,123}b,表示a与b之间只能是abc或xzy或123</td></tr></tbody></table><h2 id="Shell元字符"><a href="#Shell元字符" class="headerlink" title="Shell元字符"></a>Shell元字符</h2><table><thead><tr><th align="center">字符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">^</td><td align="left">只匹配行首</td></tr><tr><td align="center">$</td><td align="left">只匹配行尾</td></tr><tr><td align="center">*</td><td align="left">只一个单字符后紧跟*，匹配0个或多个此单字符</td></tr><tr><td align="center">+</td><td align="left">匹配一个或多个字符</td></tr><tr><td align="center">?</td><td align="left">匹配模式出现频率，例如使用/XY?Z/匹配X Y Z或Y Z</td></tr><tr><td align="center">[]</td><td align="left">只匹配[]内字符。可以是单个字符，也可以是字符序列。可以使用-表示[]内字符序列范围，如用[1-5]代替[1 2 3 4 5]</td></tr><tr><td align="center">[x-y]</td><td align="left">匹配以字符范围组成的组中的一个字符</td></tr><tr><td align="center">[^]</td><td align="left">匹配一个不在范围内的字符</td></tr><tr><td align="center">.</td><td align="left">只匹配任意单字符</td></tr><tr><td align="center">pattern{n}</td><td align="left">只用来匹配前面pattern出现次数,n为次数</td></tr><tr><td align="center">pattern{n,}m</td><td align="left">含义同上,但次数最少为n*</td></tr><tr><td align="center">pattern{n,m}</td><td align="left">含义同上,但pattern出现次数在n与m之间</td></tr></tbody></table><h2 id="Shell转义字符"><a href="#Shell转义字符" class="headerlink" title="Shell转义字符"></a>Shell转义字符</h2><table><thead><tr><th align="center">字符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">‘’（单引号）</td><td align="left">又叫硬转义,其内部所有的Shell元字符、通配符都会被关掉。注：硬转义中不允许出现’（单引号）</td></tr><tr><td align="center">(反斜杠)</td><td align="left">又叫转义，去除其后紧跟的元字符或通配符的特殊意义</td></tr></tbody></table><h2 id="Shell逻辑运算符及表达式"><a href="#Shell逻辑运算符及表达式" class="headerlink" title="Shell逻辑运算符及表达式"></a>Shell逻辑运算符及表达式</h2><h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><table><thead><tr><th align="center">运算符号</th><th align="center">代表意义</th><th align="center">应用</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">等于</td><td align="center">整型或字符串比较:str1=str2</td><td align="left">字符串str1和字符串str2相等时返回真,如果在[]中,只能是字符串</td></tr><tr><td align="center">==</td><td align="center">等于</td><td align="center">整型或字符串比较:str1==str2</td><td align="left">字符串str1和字符串str2相等时返回真,如果在[]中,只能是字符串</td></tr><tr><td align="center">!=</td><td align="center">不等于</td><td align="center">整型或字符串比较:str1!=str2</td><td align="left">字符串str1和字符串str2不相等时返回真,如果在[]中,只能是字符串</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td><td align="center">整型或字符串比较:str1&lt;str2</td><td align="left">按字典顺序排序,字符串str1在字符串str2之前,在[]中,它表示字符串,如需使用请转义&lt;</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td><td align="center">整型或字符串比较:str1&gt;str2</td><td align="left">在[]中,它表示字符串,如需使用请转义&gt;</td></tr><tr><td align="center">-eq</td><td align="center">等于</td><td align="center">整型比较:int1 -eq int2</td><td align="left">如果int1等于int2,则返回真</td></tr><tr><td align="center">-ne</td><td align="center">不等于</td><td align="center">整型比较:int1 -ne int2</td><td align="left">如果int1不等于int2,则返回真</td></tr><tr><td align="center">-lt</td><td align="center">小于</td><td align="center">整型比较:int1 -lt int2</td><td align="left">如果int1小于int2,则返回真</td></tr><tr><td align="center">-gt</td><td align="center">大于</td><td align="center">整型比较:int1 -gt int2</td><td align="left">如果int1大于int2,则返回真</td></tr><tr><td align="center">-le</td><td align="center">小于或等于</td><td align="center">整型比较:int -le int2</td><td align="left">如果int1小于或等于int2,则返回真</td></tr><tr><td align="center">-ge</td><td align="center">大于或等于</td><td align="center">整型比较:int1 -ge int2</td><td align="left">如果int1大于或等于int2,则返回真</td></tr><tr><td align="center">-z</td><td align="center">空字符串</td><td align="center">字符串比较:-z string</td><td align="left">字符串string为空串(长度为0）时返回真</td></tr><tr><td align="center">-n</td><td align="center">非空字符串</td><td align="center">字符串比较:-n string</td><td align="left">字符串string为非空字符串时返回真</td></tr></tbody></table><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th align="center">运算符号</th><th align="center">代表意义</th><th align="center">应用</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">-a</td><td align="center">双方都成立(and)</td><td align="center">逻辑表达式 -a 逻辑表达式</td><td align="left">在[]表达式中使用</td></tr><tr><td align="center">-o</td><td align="center">单方成立(or)</td><td align="center">逻辑表达式 -o 逻辑表达式</td><td align="left">在[]表达式中使用</td></tr><tr><td align="center">!</td><td align="center">逻辑否,条件为假,结果为真</td><td align="center">&nbsp;</td><td align="left">&nbsp;</td></tr><tr><td align="center">&amp;&amp;</td><td align="center">双方都成立（and）</td><td align="center">逻辑表达式 &amp;&amp; 逻辑表达式</td><td align="left">在[[]]表达式中使用</td></tr><tr><td align="center">\</td><td align="center">\</td><td align="center">&nbsp;</td><td align="left">单方成立(or)</td></tr></tbody></table><h3 id="文件和目录判断符"><a href="#文件和目录判断符" class="headerlink" title="文件和目录判断符"></a>文件和目录判断符</h3><table><thead><tr><th align="center">逻辑符号</th><th align="center">代表意义</th><th align="center">应用</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">-f</td><td align="center">判断文件是否存在</td><td align="center">-f filename</td><td align="left">当filename存在并且是正规文件时返回真</td></tr><tr><td align="center">-d</td><td align="center">判断目录是否存在</td><td align="center">-d pathname</td><td align="left">当pathname存在并且是一个目录时返回真</td></tr><tr><td align="center">-b</td><td align="center">判断是否为一个块文件</td><td align="center">-b filename</td><td align="left">当filename存在并且是块文件时返回真(返回0)</td></tr><tr><td align="center">-c</td><td align="center">判断是否为一个字符文件</td><td align="center">-c filename</td><td align="left">当filename存在并且是字符文件时返回真</td></tr><tr><td align="center">-S</td><td align="center">判断是否为一个socket</td><td align="center">-S filename</td><td align="left">当filename存在并且是socket时返回真</td></tr><tr><td align="center">-L</td><td align="center">判断是否为一个符号链接文件</td><td align="center">-L filename</td><td align="left">当filename存在并且是符号链接文件时返回真</td></tr><tr><td align="center">-e</td><td align="center">判断文件或目录是否存在</td><td align="center">-e pathname</td><td align="left">当由pathname指定的文件或目录存在时返回真</td></tr></tbody></table><h3 id="程序的逻辑卷标判断符"><a href="#程序的逻辑卷标判断符" class="headerlink" title="程序的逻辑卷标判断符"></a>程序的逻辑卷标判断符</h3><table><thead><tr><th align="center">逻辑符号</th><th align="center">代表意义</th><th align="center">应用</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">-G</td><td align="center">判断是否由GID所执行的程序所拥有</td><td align="center">-G pathname</td><td align="left">当由pathname指定的文件或目录存在,并且属于当前进程有效用户ID的用户的用户组时返回真</td></tr><tr><td align="center">-O</td><td align="center">判断是否由UID所执行的程序所拥有</td><td align="center">-O pathname</td><td align="left">当由pathname指定的文件或目录存在,并且被当前进程有效用户ID的用户拥有时返回真</td></tr><tr><td align="center">-p</td><td align="center">判断是否为程序间传送信息的命名管道或FIFO</td><td align="center">-p filename</td><td align="left">当filename存在并且是命名管道时返回真</td></tr></tbody></table><h3 id="档案的属性判断符"><a href="#档案的属性判断符" class="headerlink" title="档案的属性判断符"></a>档案的属性判断符</h3><table><thead><tr><th align="center">逻辑符号</th><th align="center">代表意义</th><th align="center">应用</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">-r</td><td align="center">判断是否为可读的属性</td><td align="center">-r pathname</td><td align="left">当由pathname指定的文件或目录存在并且可读时返回真</td></tr><tr><td align="center">-w</td><td align="center">判断是否为可以写入的属性</td><td align="center">-w pathname</td><td align="left">当由pathname指定的文件或目录存在并且可写时返回真</td></tr><tr><td align="center">-x</td><td align="center">判断是否为可执行的属性</td><td align="center">-x pathname</td><td align="left">当由pathname指定的文件或目录存在并且可执行时返回真</td></tr><tr><td align="center">-s</td><td align="center">判断是否为非空白档案</td><td align="center">-s filename</td><td align="left">当filename存在并且文件大小大于0时返回真</td></tr><tr><td align="center">-u</td><td align="center">判断是否具有SUID的属性</td><td align="center">-u pathname</td><td align="left">当由pathname指定的文件或目录存在并且设置了SUID位时返回真</td></tr><tr><td align="center">-g</td><td align="center">判断是否具有SGID的属性</td><td align="center">-g pathname</td><td align="left">当由pathname指定的文件或目录存在并且设置了SGID位时返回真</td></tr><tr><td align="center">-k</td><td align="center">判断是否具有粘滞的属性</td><td align="center">-k pathname</td><td align="left">当由pathname指定的文件或目录存在并且设置了“粘滞”位时返回真</td></tr></tbody></table><h3 id="两个档案之间的判断与比较符"><a href="#两个档案之间的判断与比较符" class="headerlink" title="两个档案之间的判断与比较符"></a>两个档案之间的判断与比较符</h3><table><thead><tr><th align="center">逻辑符号</th><th align="center">代表意义</th><th align="center">应用</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">-nt</td><td align="center">第一个比第二个档案新</td><td align="center">file1 -nt file2</td><td align="left">file1比file2新时返回真</td></tr><tr><td align="center">-ot</td><td align="center">第一个比第二个档案旧</td><td align="center">file1 -ot file2</td><td align="left">file1比file2旧时返回真</td></tr><tr><td align="center">-ef</td><td align="center">第一个与第二个档案为同一个档案</td><td align="center">file1 -ef file2</td><td align="left">file1和file2是同一个档案时返回真</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Shell通配符&quot;&gt;&lt;a href=&quot;#Shell通配符&quot; class=&quot;headerlink&quot; title=&quot;Shell通配符&quot;&gt;&lt;/a&gt;Shell通配符&lt;/h1&gt;&lt;h2 id=&quot;Shell常用通配符&quot;&gt;&lt;a href=&quot;#Shell常用通配符&quot; class=&quot;</summary>
      
    
    
    
    <category term="云系统维护" scheme="http://www.ifunan.cn/categories/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/"/>
    
    
    <category term="Shell" scheme="http://www.ifunan.cn/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Ceph分布式存储系统搭建</title>
    <link href="http://www.ifunan.cn/2020/04/26/%E4%BA%91%E5%AD%98%E5%82%A8_Ceph/"/>
    <id>http://www.ifunan.cn/2020/04/26/%E4%BA%91%E5%AD%98%E5%82%A8_Ceph/</id>
    <published>2020-04-26T04:35:55.000Z</published>
    <updated>2020-08-30T09:48:51.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ceph分布式存储系统搭建"><a href="#Ceph分布式存储系统搭建" class="headerlink" title="Ceph分布式存储系统搭建"></a>Ceph分布式存储系统搭建</h1><p>实验环境：</p><table><thead><tr><th align="center">主机名</th><th align="center">CPU核心</th><th align="center">系统磁盘</th><th align="center">IP地址（NAT）</th><th align="center">系统</th></tr></thead><tbody><tr><td align="center">ceph01</td><td align="center">1*2</td><td align="center">40GB</td><td align="center">192.168.200.20</td><td align="center">CentOS 7</td></tr><tr><td align="center">ceph02</td><td align="center">1*2</td><td align="center">40GB</td><td align="center">192.168.200.30</td><td align="center">CentOS 7</td></tr><tr><td align="center">ceph03</td><td align="center">1*2</td><td align="center">40GB</td><td align="center">192.168.200.40</td><td align="center">CentOS 7</td></tr></tbody></table><blockquote><p>注：以下操作须在不同server上进行，请看清后再行操作</p></blockquote><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="ceph01-amp-ceph02-amp-ceph03"><a href="#ceph01-amp-ceph02-amp-ceph03" class="headerlink" title="ceph01 &amp; ceph02 &amp; ceph03"></a>ceph01 &amp; ceph02 &amp; ceph03</h3><ol><li>配置IP到主机名映射<br><code>[root@ceph01]# echo &quot;192.168.200.20 ceph01&quot; &gt;&gt; /etc/hosts</code><br><code>[root@ceph01]# echo &quot;192.168.200.30 ceph02&quot; &gt;&gt; /etc/hosts</code><br><code>[root@ceph01]# echo &quot;192.168.200.40 ceph03&quot; &gt;&gt; /etc/hosts</code></li><li>关闭SELinux<br><code>[root@ceph01]# sed -i &#39;s/SELINUX=.*/SELINUX=disabled/g&#39; /etc/selinux/config</code><br><code>[root@ceph01]# setenforce 0</code><br><code>[root@ceph01]# getenforce</code></li><li>关闭防火墙<br><code>[root@ceph01]# iptables -F</code><br><code>[root@ceph01]# iptables -X</code><br><code>[root@ceph01]# iptables -Z</code><br><code>[root@ceph01]# systemctl stop firewalld</code><br><code>[root@ceph01]# systemctl disable firewalld.service</code><blockquote><p>请在ceph02和ceph03上重复以上操作</p></blockquote></li></ol><h3 id="ceph01"><a href="#ceph01" class="headerlink" title="ceph01"></a>ceph01</h3><p>1.设置SSH无密码登录ceph02和ceph03<br><code>[root@ceph01]# ssh-keygen</code><br><code>[root@ceph01]# ssh-copy-id -i /root/.ssh/id_rsa.pub root@ceph02</code><br><code>[root@ceph01]# ssh-copy-id -i /root/.ssh/id_rsa.pub root@ceph03</code><br>2. 安装时钟同步<br><code>[root@ceph01]# yum install ntp ntpdate -y</code><br>3. 配置ntp,注释掉其他ntp服务器,设置为本机提供时钟同步<br><code>[root@ceph01]# vi /etc/ntp.conf</code><br>添加以下两行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server 127.127.1.0</span><br><span class="line">fudge 127.127.1.0 stratum 10</span><br></pre></td></tr></table></figure><p><code>[root@ceph01]# systemctl start ntpd.service</code><br><code>[root@ceph01]# systemctl enable ntpd.service</code></p><h3 id="ceph02-amp-ceph03"><a href="#ceph02-amp-ceph03" class="headerlink" title="ceph02 &amp; ceph03"></a>ceph02 &amp; ceph03</h3><ol><li>同步为ceph01的时间<br><code>[root@ceph02]# yum install ntp ntpdate -y</code><br><code>[root@ceph02]# ntpdate 192.168.200.20</code><br><code>[root@ceph02]# systemctl enable ntpd.service</code><br><code>[root@ceph02]# systemctl status ntpd.service</code><blockquote><p>ceph03重复以上操作</p></blockquote></li></ol><h3 id="ceph01-1"><a href="#ceph01-1" class="headerlink" title="ceph01"></a>ceph01</h3><ol><li>安装FTP<br><code>[root@ceph01]# yum install vsftpd -y</code></li><li>设置FTP匿名访问的路径<br><code>[root@ceph01]# echo &quot;anon_root=/files/&quot; &gt;&gt; /etc/vsftpd/vsftpd.conf</code><br><code>[root@ceph01]# systemctl restart vsftpd</code><br><code>[root@ceph01]# systemctl enable vsftpd</code></li><li>配置yum源（设置光驱连接到虚拟机中）<br><code>[root@ceph01]# mkdir -p /files/centos</code><br><code>[root@ceph01]# mount /dev/cdrom /mnt</code><br><code>[root@ceph01]# cp -rfv /mnt/* /files/centos</code><br><code>[root@ceph01]# umount /mnt</code><br>更换XianDian-IaaS-v2.0-20170420.iso到光驱中<br><code>[root@ceph01]# mount /dev/cdrom /mnt</code><br><code>[root@ceph01]# cp -rfv /mnt/* /files</code><br><code>[root@ceph01]# umount /mnt</code></li><li>安装python包<br><code>[root@ceph01]# rpm -ivh /files/iaas-repo/base/python-backports-1.0-8.el7.x86_64.rpm</code><br><code>[root@ceph01]# rpm -ivh /files/iaas-repo/base/python-backports-ssl_match_hostname-3.4.0.2-4.el7.noarch.rpm</code><br><code>[root@ceph01]# rpm -ivh /files/iaas-repo/base/python-setuptools-0.9.8-4.el7.noarch.rpm</code></li></ol><h3 id="ceph01-amp-ceph02-amp-ceph03-1"><a href="#ceph01-amp-ceph02-amp-ceph03-1" class="headerlink" title="ceph01 &amp; ceph02 &amp; ceph03"></a>ceph01 &amp; ceph02 &amp; ceph03</h3><p><code>[root@ceph01]# cd /etc/yum.repos.d</code><br><code>[root@ceph01]# mkdir backup</code><br><code>[root@ceph01]# mv C* backup/</code><br><code>[root@ceph01]# vi local.repo</code><br>添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[centos]</span><br><span class="line">name&#x3D;centos</span><br><span class="line">baseurl&#x3D;ftp:&#x2F;&#x2F;192.168.200.20&#x2F;centos</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">enable&#x3D;1</span><br><span class="line">[iaas]</span><br><span class="line">name&#x3D;iaas</span><br><span class="line">baseurl&#x3D;ftp:&#x2F;&#x2F;192.168.200.20&#x2F;iaas-repo</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">enable&#x3D;1</span><br></pre></td></tr></table></figure><p><code>[root@ceph01]# yum clean all</code><br><code>[root@ceph01]# yum repolist</code></p><h2 id="安装配置Ceph"><a href="#安装配置Ceph" class="headerlink" title="安装配置Ceph"></a>安装配置Ceph</h2><h3 id="ceph01-2"><a href="#ceph01-2" class="headerlink" title="ceph01"></a>ceph01</h3><ol><li>安装Ceph<br><code>[root@ceph01]# yum install ceph-deploy -y</code><br><code>[root@ceph01]# mkdir /etc/ceph</code><br><code>[root@ceph01]# cd /etc/ceph</code></li><li>创建新的集群<br><code>[root@ceph01]# ceph-deploy new ceph01</code></li><li>所有节点安装Ceph<br><code>[root@ceph01]# ceph-deploy install ceph01 ceph02 ceph03</code></li><li>检查Ceph版本<br><code>[root@ceph01]# ceph -v</code></li><li>创建第一个Ceph monitor<br><code>[root@ceph01]# ceph-deploy --overwrite-conf mon create-initial</code></li><li>查看集群状态<br><code>[root@ceph01]# ceph -s</code></li><li>检查ceph01上可用磁盘<br><code>[root@ceph01]# ceph-deploy disk list ceph01</code></li><li>创建OSD所用目录并设置权限<br><code>[root@ceph01]# mkdir -p /opt/osd1</code><br><code>[root@ceph01]# chmod 777 /opt/osd1</code></li></ol><h3 id="ceph02"><a href="#ceph02" class="headerlink" title="ceph02"></a>ceph02</h3><p><code>[root@ceph01]# mkdir -p /opt/osd2</code><br><code>[root@ceph01]# chmod 777 /opt/osd2</code></p><h3 id="ceph03"><a href="#ceph03" class="headerlink" title="ceph03"></a>ceph03</h3><p><code>[root@ceph01]# mkdir -p /opt/osd3</code><br><code>[root@ceph01]# chmod 777 /opt/osd3</code></p><h3 id="ceph01-3"><a href="#ceph01-3" class="headerlink" title="ceph01"></a>ceph01</h3><ol><li><p>创建OSD节点<br><code>[root@ceph01]# ceph-deploy osd prepare ceph01:/opt/osd1 ceph02:/opt/osd2 ceph03:/opt/osd3</code></p></li><li><p>激活OSD节点<br><code>[root@ceph01]# ceph-deploy osd activate  ceph01:/opt/osd1 ceph02:/opt/osd2 ceph03:/opt/osd3</code></p></li><li><p>检查集群状态<br><code>[root@ceph01]# ceph -s</code></p><blockquote><p>health(健康)显示：OK则为成功<br>cluster 147354a2-e174-4ea6-8464-58f1839fbd2f<br>health HEALTH_OK<br>monmap e1: 1 mons at {ceph-node1=192.168.200.211:6789/0}<br>election epoch 2, quorum 0 ceph-node1<br>osdmap e13: 3 osds: 3 up, 3 in<br>pgmap v19: 64 pgs, 1 pools, 0 bytes data, 0 objects<br>25907 MB used, 55365 MB / 81272 MB avail<br>64 active+clean</p></blockquote></li><li><p>开放权限给其他节点，进行灾备处理<br><code>[root@ceph01]# ceph-deploy admin ceph-node&#123;1,2,3&#125;</code><br><code>[root@ceph01]# chmod +r /etc/ceph/ceph.client.admin.keyring</code></p></li></ol><h2 id="Ceph运维操作"><a href="#Ceph运维操作" class="headerlink" title="Ceph运维操作"></a>Ceph运维操作</h2><h3 id="ceph01-amp-ceph02-amp-ceph03-2"><a href="#ceph01-amp-ceph02-amp-ceph03-2" class="headerlink" title="ceph01 &amp; ceph02 &amp; ceph03"></a>ceph01 &amp; ceph02 &amp; ceph03</h3><ol><li>检查ceph的安装状态<br><code>[root@ceph01]# ceph status</code></li><li>观察集群的健康状况<br><code>[root@ceph01]# ceph -w</code></li><li>检查ceph monitor仲裁状态<br><code>[root@ceph01]# ceph quorum_status --format json-pretty</code></li><li>导出monitor信息<br><code>[root@ceph01]# ceph mon dump</code></li><li>检查集群使用状态<br><code>[root@ceph01]# ceph df</code></li><li>检查ceph monitor、osd、PG状态<br><code>[root@ceph01]# ceph mon stat</code><br><code>[root@ceph01]# ceph osd stat</code><br><code>[root@ceph01]# ceph pg stat</code></li><li>列表pg，导出pg<br><code>[root@ceph01]# ceph pg dump</code></li><li>ceph 存储池列表<br><code>[root@ceph01]# ceph osd lspools</code></li><li>检查osd的crush<br><code>[root@ceph01]# ceph osd tree</code></li><li>列表集群的认证密钥<br><code>[root@ceph01]# ceph auth list</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ceph分布式存储系统搭建&quot;&gt;&lt;a href=&quot;#Ceph分布式存储系统搭建&quot; class=&quot;headerlink&quot; title=&quot;Ceph分布式存储系统搭建&quot;&gt;&lt;/a&gt;Ceph分布式存储系统搭建&lt;/h1&gt;&lt;p&gt;实验环境：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
</summary>
      
    
    
    
    <category term="云存储技术" scheme="http://www.ifunan.cn/categories/%E4%BA%91%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Ceph" scheme="http://www.ifunan.cn/tags/Ceph/"/>
    
  </entry>
  
  <entry>
    <title>Ansible安装配置</title>
    <link href="http://www.ifunan.cn/2020/04/22/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4_Ansible/"/>
    <id>http://www.ifunan.cn/2020/04/22/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4_Ansible/</id>
    <published>2020-04-21T16:35:56.000Z</published>
    <updated>2020-08-30T09:48:51.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ansible安装配置"><a href="#Ansible安装配置" class="headerlink" title="Ansible安装配置"></a>Ansible安装配置</h1><p>概要：Ansible是一款基于Python开发的自动化运维开源工具，主要实现批量系统配置、批量程序部署、批量运行命令、批量执行任务等。<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/04/22/JYEsPI.png"><br>实验环境：</p><table><thead><tr><th align="center">主机类别</th><th align="center">主机名</th><th align="center">IP地址</th><th align="center">操作系统</th></tr></thead><tbody><tr><td align="center">Ansible 控制主机</td><td align="center">ansible-ctl</td><td align="center">192.168.200.20</td><td align="center">CentOS 7</td></tr><tr><td align="center">Ansible 被控节点</td><td align="center">web01</td><td align="center">192.168.200.30</td><td align="center">CentOS 7</td></tr><tr><td align="center">Ansible 被控节点</td><td align="center">web02</td><td align="center">192.168.200.40</td><td align="center">Cent0S 7</td></tr></tbody></table><h2 id="安装Ansible"><a href="#安装Ansible" class="headerlink" title="安装Ansible"></a>安装Ansible</h2><p>此处使用阿里云的源（需要联网操作）<br><code>[root@localhost ~]# curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</code><br>安装Ansible<br><code>[root@localhost ~]# yum install ansible -y</code></p><h2 id="配置Ansible环境"><a href="#配置Ansible环境" class="headerlink" title="配置Ansible环境"></a>配置Ansible环境</h2><p>Ansible的配置文件以ini格式存储。在运行Ansible命令时，命令将采用预先设定的顺序查找配置文件，默认步骤如下：</p><ul><li>首先检查系统环境变量；</li><li>其次，检查当前目录下的ansible.cfg配置文件；</li><li>再次，检查当前用户home目录下的.ansible.cfg文件；</li><li>最后，检查ansible默认yum安装时自动产生的文件/etc/ansible/ansible.cfg。</li></ul><h3 id="修改配置文件-etc-ansible-ansible-cfg"><a href="#修改配置文件-etc-ansible-ansible-cfg" class="headerlink" title="修改配置文件/etc/ansible/ansible.cfg"></a>修改配置文件/etc/ansible/ansible.cfg</h3><p><code>[root@localhost ~]# vi /etc/ansible/ansible.cfg</code><br>修改如下参数并取消注释:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">inventory      &#x3D; &#x2F;etc&#x2F;ansible&#x2F;hosts</span><br><span class="line">library        &#x3D; &#x2F;usr&#x2F;share&#x2F;my_modules&#x2F;</span><br><span class="line">forks          &#x3D; 5</span><br><span class="line">sudo_user      &#x3D; root</span><br><span class="line">remote_port    &#x3D; 22</span><br><span class="line">host_key_checking &#x3D; False</span><br><span class="line">timeout &#x3D; 60</span><br><span class="line">log_path &#x3D; &#x2F;var&#x2F;log&#x2F;ansible.log</span><br></pre></td></tr></table></figure><h3 id="配置控制主机SSH无密码访问被控节点"><a href="#配置控制主机SSH无密码访问被控节点" class="headerlink" title="配置控制主机SSH无密码访问被控节点"></a>配置控制主机SSH无密码访问被控节点</h3><ol><li>Ansible控制主机创建密钥(默认在 /root/.ssh/id_rsa.pub)，id_rsa为私钥，id_rsa.pub为公钥<br><code>[root@localhost ~]# ssh-keygen</code></li><li>将此公钥下发到两个被控节点(弹出提出输入 yes即可）<br><code>[root@localhost ~]# ssh-copy-id -i /root/.ssh/id_rsa.pub root@192.168.200.30</code><br><code>[root@localhost ~]# ssh-copy-id -i /root/.ssh/id_rsa.pub root@192.168.200.40</code></li><li>验证无密码SSH是否成功<br><code>[root@localhost ~]# ssh root@192.168.200.30</code><br><code>[root@localhost ~]# exit</code><br><code>[root@localhost ~]# ssh root@192.168.200.40</code><br><code>[root@localhost ~]# exit</code></li></ol><h2 id="测试Ansible"><a href="#测试Ansible" class="headerlink" title="测试Ansible"></a>测试Ansible</h2><h3 id="主机连通"><a href="#主机连通" class="headerlink" title="主机连通"></a>主机连通</h3><ol><li>配置ansible被控节点的主机与组(注意去掉注释）<br><code>[root@localhost ~]# vi /etc/ansible/hosts</code><br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/04/22/JYVnJI.png"></li><li>使用Ansible的ping模块对单台主机分别进行ping操作，出现如图所示表示连通<br><code>[root@localhost ~]# ansible 192.168.100.129 -m ping</code><br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/04/22/JYVZod.png"><blockquote><p>注：如上命令如由输出WARNING信息，可按提示更改主配置文件ansible.cfg，取消警告信息</p></blockquote></li><li>ping webservers组<br><code>[root@localhost ~]# ansible webservers -m ping</code><br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/04/22/JYVVdH.png"></li></ol><h3 id="在控制主机发送命令到被控节点"><a href="#在控制主机发送命令到被控节点" class="headerlink" title="在控制主机发送命令到被控节点"></a>在控制主机发送命令到被控节点</h3><ol><li>批量执行命令<br><code>[root@localhost ~]# ansible webservers -m command -a &quot;pwd&quot;</code></li><li>在用户home目录下创建一个资源清单文件invertory.cfg并写入内容<br><code>[root@localhost ~]# ansible webservers -m command -a &quot;touch /root/inventory.cfg&quot;</code><br><code>[root@localhost ~]# ansible webservers -m command -a &quot;echo Hello Ansible! &gt; /root/inventory.cfg&quot;</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ansible安装配置&quot;&gt;&lt;a href=&quot;#Ansible安装配置&quot; class=&quot;headerlink&quot; title=&quot;Ansible安装配置&quot;&gt;&lt;/a&gt;Ansible安装配置&lt;/h1&gt;&lt;p&gt;概要：Ansible是一款基于Python开发的自动化运维开源工具，</summary>
      
    
    
    
    <category term="云系统维护" scheme="http://www.ifunan.cn/categories/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/"/>
    
    
    <category term="Ansible" scheme="http://www.ifunan.cn/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>GlusterFS文件系统搭建</title>
    <link href="http://www.ifunan.cn/2020/04/19/%E4%BA%91%E5%AD%98%E5%82%A8_GlusterFS/"/>
    <id>http://www.ifunan.cn/2020/04/19/%E4%BA%91%E5%AD%98%E5%82%A8_GlusterFS/</id>
    <published>2020-04-19T07:27:05.000Z</published>
    <updated>2020-08-30T09:48:51.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GlusterFS文件系统搭建"><a href="#GlusterFS文件系统搭建" class="headerlink" title="GlusterFS文件系统搭建"></a>GlusterFS文件系统搭建</h1><p>实验环境及配置：两台虚拟机，使用centos6.5系统、最小化安装，具体配置如下</p><table><thead><tr><th align="center">主机名</th><th align="center">系统</th><th align="center">CUP核心</th><th align="center">系统用磁盘空间</th><th align="center">GlusterFS用磁盘空间</th><th align="center">IP(虚拟机使用NAT模式)</th></tr></thead><tbody><tr><td align="center">Gluster01</td><td align="center">CentOS 6.5</td><td align="center">1*2</td><td align="center">30GB</td><td align="center">10GB</td><td align="center">192.168.200.10</td></tr><tr><td align="center">Gluster02</td><td align="center">CentOS 6.5</td><td align="center">1*2</td><td align="center">30GB</td><td align="center">10GB</td><td align="center">192.168.200.20</td></tr></tbody></table><blockquote><p>注：以下操作须在不同server上进行，请看清后再行操作</p></blockquote><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><h3 id="Gluster01-amp-Gluster02"><a href="#Gluster01-amp-Gluster02" class="headerlink" title="Gluster01 &amp; Gluster02"></a>Gluster01 &amp; Gluster02</h3><ol><li><p>更改IP到主机名映射<br><code>[root@Gluster01]# vi /etc/hosts</code><br>添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.200.10 Gluster01</span><br><span class="line">192.168.200.20 Gluster02</span><br></pre></td></tr></table></figure></li><li><p>更改DNS<br><code>[root@Gluster01]# vi /etc/resolv.conf</code><br>添加如下内容：<br><code>nameserver 114.114.114.114</code></p></li><li><p>修改主机名<br><code>[root@Gluster01]# vi /etc/sysconfig/network</code><br>修改<code>HOSTNAME=Gluster01</code><br><code>[root@Gluster01]# Hostname Gluster01</code></p></li><li><p>关闭SElinux<br><code>[root@Gluster01]# vi /etc/selinux/config</code><br>修改<code>SELINUX=disabled</code><br><code>[root@Gluster01]# setenforce 0</code><br><code>[root@Gluster01]# getenforce</code></p></li><li><p>关闭防火墙<br><code>[root@Gluster01]# iptables -F</code><br><code>[root@Gluster01]# iptables -X</code><br><code>[root@Gluster01]# iptables -Z</code><br><code>[root@Gluster01]# service iptables save</code><br><code>[root@Gluster01]# service iptables stop</code><br><code>[root@Gluster01]# chkconfig iptables off</code></p></li><li><p>配置yum源<br>方法一：<br><code>[root@Gluster01]# vi /etc/yum.repos.d/local.repo</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[glusterfs]</span><br><span class="line">name&#x3D;glusterfs</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;buildlogs.centos.org&#x2F;centos&#x2F;6&#x2F;storage&#x2F;x86_64&#x2F;gluster-3.13&#x2F;</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">enable&#x3D;1</span><br></pre></td></tr></table></figure><p><code>[root@Gluster01]# yum clean all</code><br><code>[root@Gluster01]# yum makecache</code></p><blockquote><p>注：如提示ssl连接错误或连接超时请更换镜像，连接不到baseurl里的链接，请使用方法二</p></blockquote><p>方法二：<br><code>[root@Gluster01]# vi /etc/yum.repos.d/local.repo</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[glusterfs]</span><br><span class="line">name&#x3D;glusterfs</span><br><span class="line">baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;mnt&#x2F;glusterfs</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">enable&#x3D;1</span><br></pre></td></tr></table></figure><p><a href="http://image.lovechenfeng.com/gluster3.13.zip">点我下载glusterfs3.13到本地</a><br>将下载好的包解压后传入目录/mnt/glusterfs中<br><code>[root@Gluster01]# mkdir /mnt/glusterfs</code><br><code>[root@Gluster01]# yum clean all</code><br><code>[root@Gluster01]# yum makecache</code></p></li><li><p>安装glusterfs<br><code>[root@Gluster01]# yum install glusterfs-server xfsprogs -y</code><br><code>[root@Gluster01]# service glusterd status</code><br><code>[root@Gluster01]# service glusterd start</code><br><code>[root@Gluster01]# chkconfig glusterd on</code></p></li></ol><blockquote><p>注：Gluster02也做如上操作，注意修改主机名时主机名不同</p></blockquote><h3 id="Gluster01"><a href="#Gluster01" class="headerlink" title="Gluster01"></a>Gluster01</h3><ol><li>安装时间同步<br><code>[root@Gluster01]# yum install ntp -y</code><br><code>[root@Gluster01]# vi /etc/ntp.conf</code></li><li>编辑ntp配置文件，注释掉其他ntp服务器，加入下面两行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server  127.127.1.0     </span><br><span class="line">fudge   127.127.1.0 stratum 10</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/04/19/JuzOxS.png"></li><li>启动ntp并设置为开机启动<br><code>[root@Gluster01]# service ntpd start</code><br><code>[root@Gluster01]# chkconfig ntpd on</code></li></ol><h3 id="Gluster02"><a href="#Gluster02" class="headerlink" title="Gluster02"></a>Gluster02</h3><p><code>[root@Gluster02]# yum install ntp -y</code><br><code>[root@Gluster02]# service ntpd start</code><br><code>[root@Gluster02]# chkconfig ntpd on</code><br>同步Gluster01的时间到本地<br><code>[root@Gluster02]# ntpdate 192.168.200.10</code></p><h2 id="配置GlusterFS"><a href="#配置GlusterFS" class="headerlink" title="配置GlusterFS"></a>配置GlusterFS</h2><h3 id="Gluster01-1"><a href="#Gluster01-1" class="headerlink" title="Gluster01"></a>Gluster01</h3><ol><li>邀请本机加入gluster<br><code>[root@Gluster01]# gluster peer probe 192.168.200.10</code></li><li>邀请gluster02加入<br><code>[root@Gluster01]# gluster peer probe 192.168.200.20</code></li><li>查看gluster状态<br><code>[root@Gluster01]# gluster peer status</code><br><code>[root@Gluster01]# lsblk</code></li><li>格式化sdb，创建xfs文件系统<br><code>[root@Gluster01]# mkfs.xfs /dev/sdb</code></li><li>创建gluster使用的目录<br><code>[root@Gluster01]# mkdir -p /export/brick1</code></li><li>将sdb挂载到目录<br><code>[root@Gluster01]# mount /dev/sdb /export/brick1</code><br><code>[root@Gluster01]# df -h</code><br><code>[root@Gluster01]# mkdir /export/brick1/fn0</code></li><li>创建条带卷，ID为fn0，将brick1加入进来<br><code>[root@Gluster01]# gluster volume create fn0 stripe 2 192.168.200.10:/export/brick1/fn0 192.168.200.20:/export brick1/fn0</code></li><li>启动卷<br><code>[root@Gluster01]# gluster volume start fn0</code></li><li>查看卷信息<br><code>[root@Gluster01]# gluster volume info</code></li></ol><h3 id="Gluster02-1"><a href="#Gluster02-1" class="headerlink" title="Gluster02"></a>Gluster02</h3><p><code>[root@Gluster02]# lsblk</code></p><ol><li>格式化sdb，创建xfs文件系统<br><code>[root@Gluster02]# mkfs.xfs /dev/sdb</code></li><li>创建gluster使用的目录<br><code>[root@Gluster02]# mkdir -p /export/brick1</code></li><li>将sdb挂载到目录<br><code>[root@Gluster02]# mount /dev/sdb /export/brick1</code><br><code>[root@Gluster02]# df -h</code><br><code>[root@Gluster02]# mkdir /export/brick1/fn0</code></li><li>GlusterFS2作为GlusterFS的客户端进行验证<br><code>[root@Gluster02]# mount -t glusterfs 192.168.200.111:/fn0 /mnt</code></li><li>验证挂载是否成功<br><code>[root@Gluster02]# df -h</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GlusterFS文件系统搭建&quot;&gt;&lt;a href=&quot;#GlusterFS文件系统搭建&quot; class=&quot;headerlink&quot; title=&quot;GlusterFS文件系统搭建&quot;&gt;&lt;/a&gt;GlusterFS文件系统搭建&lt;/h1&gt;&lt;p&gt;实验环境及配置：两台虚拟机，使用ce</summary>
      
    
    
    
    <category term="云存储技术" scheme="http://www.ifunan.cn/categories/%E4%BA%91%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="GlusterFS" scheme="http://www.ifunan.cn/tags/GlusterFS/"/>
    
  </entry>
  
  <entry>
    <title>Nginx+Tomcat负载均衡实验</title>
    <link href="http://www.ifunan.cn/2020/04/17/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4_Nginx+Tomcat/"/>
    <id>http://www.ifunan.cn/2020/04/17/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4_Nginx+Tomcat/</id>
    <published>2020-04-17T06:31:28.000Z</published>
    <updated>2020-08-30T09:48:52.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx-Tomcat负载均衡实验"><a href="#Nginx-Tomcat负载均衡实验" class="headerlink" title="Nginx+Tomcat负载均衡实验"></a>Nginx+Tomcat负载均衡实验</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>实验用三台虚拟机，一台为Nginx负载均衡服务器，另外两台使用Tomcat提供web服务，具体配置如下：</p><table><thead><tr><th align="center">主机名</th><th align="center">IP地址</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">LB(load balance)</td><td align="center">192.168.100.30</td><td align="center">做Nginx负载均衡</td></tr><tr><td align="center">Web01</td><td align="center">192.168.100.40</td><td align="center">Web01服务器</td></tr><tr><td align="center">Web02</td><td align="center">192.168.100.50</td><td align="center">Web02服务器</td></tr></tbody></table><p><img src= "/img/loading.gif" data-lazy-src="http://image.lovechenfeng.com/N%2BT%E5%AF%BC%E5%9B%BE.png"><br>对三台服务器做基础配置(IP配置、yum源、关闭防火墙及Linux），详细过程略</p><h2 id="LB安装配置Nginx"><a href="#LB安装配置Nginx" class="headerlink" title="LB安装配置Nginx"></a>LB安装配置Nginx</h2><p>Nginx配置在前几篇文章有列出，不做赘述，详情请参见 分类页——云系统维护——Nginx单点部署 或 标签页——Nginx单点部署</p><h2 id="两台web服务器安装配置Tomcat"><a href="#两台web服务器安装配置Tomcat" class="headerlink" title="两台web服务器安装配置Tomcat"></a>两台web服务器安装配置Tomcat</h2><blockquote><p>注：两台web服务器做相同配置，此处仅以web01做演示，web02服务器做相同配置即可<br>Tomcat的安装配置与前几篇写过的 Tomcat配置类似</p></blockquote><h3 id="JDK环境安装"><a href="#JDK环境安装" class="headerlink" title="JDK环境安装"></a>JDK环境安装</h3><ol><li>检查jdk安装情况<br><code>[root@localhost ~]# rpm -qa | grep jdk</code><br>最小化安装的系统没有安装jdk，如虚拟机中已安装openJDK，需先卸载<br>查找本机上是否安装openJDK：<br><code>[root@localhost ~]# rpm -e java-1.7.0-openjdk</code></li><li>新建jvm目录<br><code>[root@localhost ~]# mkdir -p /usr/lib/jvm</code></li><li>下载并解压JDK到jvm目录下,参数-C指定要将文件解压到何处<br><code>[root@localhost ~]# tar -zxvf jdk-7u80-linux-x64.tar.gz -C /usr/lib/jvm</code><br><a href="http://image.lovechenfeng.com/jdk-7u80-linux-x64.tar.gz">jdk-7u80-linux-x64.tar.gz</a></li><li>修改解压目录名称为java<br><code>[root@localhost ~]# cd /usr/lib/jvm/</code><br><code>[root@localhost jvm]# mv jdk1.7.0_80/ java</code></li></ol><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ol><li>在文件/etc/profile末尾加上以下环境变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java</span><br><span class="line">export JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre</span><br><span class="line">export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;lib</span><br><span class="line">export PATH&#x3D;$&#123;JAVA_HOME&#125;&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure></li><li>使环境变量生效<br><code>[root@localhost jvm]# source /etc/profile</code></li><li>检查java安装结果，出现如下内容说明安装成功<br><code>[root@localhost jvm]# java -version</code><blockquote><p>java version “1.7.0_80”<br>Java(TM) SE Runtime Environment (build 1.7.0_80-b15)<br>Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode)</p></blockquote></li></ol><h3 id="安装部署Tomcat"><a href="#安装部署Tomcat" class="headerlink" title="安装部署Tomcat"></a>安装部署Tomcat</h3><ol><li>教学云平台下载并使用secureFX上传Tomcat安装包apache-tomcat-7.0.90.zip到/root目录<br><a href="http://image.lovechenfeng.com/apache-tomcat-7.0.90.zip">点我下载apache-tomcat-7.0.90.zip</a></li><li>安装解压工具<br><code>[root@localhost ~]#yum install unzip -y</code></li><li>解压tomcat<br><code>[root@localhost ~]# unzip apache-tomcat-7.0.90.zip</code></li><li>复制解压后的文件到/opt/tomcat<br><code>[root@localhost ~]# cp -r apache-tomcat-7.0.90 /opt/tomcat</code></li><li>编辑启动tomcat脚本文件startup.sh，末尾添加以下内容（/opt/tomcat/bin）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java</span><br><span class="line">JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre</span><br><span class="line">PATH&#x3D;$PATH:$&#123;JAVA_HOME&#125;&#x2F;bin:$&#123;JRE_HOME&#125;</span><br><span class="line">CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib&#x2F;rt.jar:$&#123;JAVA_HOME&#125;&#x2F;lib&#x2F;dt.jar:$&#123;JRE_HOME&#125;&#x2F;lib&#x2F;tools.jar</span><br><span class="line">TOMCAT_HOME&#x3D;&#x2F;opt&#x2F;tomcat</span><br></pre></td></tr></table></figure></li><li>编辑关闭tomcat脚本文件shutdown.sh，末尾添加以下内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java</span><br><span class="line">JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre</span><br><span class="line">PATH&#x3D;$PATH:$&#123;JAVA_HOME&#125;&#x2F;bin:$&#123;JRE_HOME&#125;</span><br><span class="line">CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib&#x2F;rt.jar:$&#123;JAVA_HOME&#125;&#x2F;lib&#x2F;dt.jar:$&#123;JRE_HOME&#125;&#x2F;lib&#x2F;tools.jar</span><br><span class="line">TOMCAT_HOME&#x3D;&#x2F;opt&#x2F;tomcat</span><br></pre></td></tr></table></figure></li><li>修改Tomcat的bin目录下.sh权限<br><code>[root@localhost ~]# chmod u+x /opt/tomcat/bin/*.sh</code></li><li>启动Tomcat<br><code>[root@localhost ~]# /opt/tomcat/bin/startup.sh</code><br>输出以下内容则表示成功：<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/24/8OMujI.png"></li><li>验证Tomcat安装启动结果<br>浏览器访问192.168.100.130:8080，如下图tomcat欢迎界面所示则表示配置成功。<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/24/8OMb2d.png"><br>注：若访问不成功，请检查虚拟机防火墙配置。</li></ol><h3 id="修改两台web服务器tomcat主页文件以标识两台服务器"><a href="#修改两台web服务器tomcat主页文件以标识两台服务器" class="headerlink" title="修改两台web服务器tomcat主页文件以标识两台服务器"></a>修改两台web服务器tomcat主页文件以标识两台服务器</h3><p><code>[root@localhost ~]# vi /opt/tomcat/webapps/ROOT/index.jsp</code><br>在</head>与<body>之间添加标识本台服务器的IP地址，方便后面负载均衡的结果查看</p><blockquote><p>注：以下IP请根据自身情况修改配置</p></blockquote><p>Web01：<br><img src= "/img/loading.gif" data-lazy-src="http://image.lovechenfeng.com/web01%E6%A0%87%E8%AF%86.png"><br>web02：<br><img src= "/img/loading.gif" data-lazy-src="http://image.lovechenfeng.com/web02%E6%A0%87%E8%AF%86.png"><br>web01显示效果：<br><img src= "/img/loading.gif" data-lazy-src="http://image.lovechenfeng.com/web01%E6%98%BE%E7%A4%BA%E6%95%88%E6%9E%9C.png"><br>web02显示效果：<br><img src= "/img/loading.gif" data-lazy-src="http://image.lovechenfeng.com/web02%E6%98%BE%E7%A4%BA%E6%95%88%E6%9E%9C.png"></p><h2 id="LB服务器Nginx负载均衡配置并验证"><a href="#LB服务器Nginx负载均衡配置并验证" class="headerlink" title="LB服务器Nginx负载均衡配置并验证"></a>LB服务器Nginx负载均衡配置并验证</h2><ol><li>修改nginx主配置文件<br><code>[root@localhost ~]# vi /etc/nginx/nginx.conf</code><br>upstream节点设置负载均衡服务器列表，将需要负载均衡的两台服务器配置加入进去：<br><img src= "/img/loading.gif" data-lazy-src="http://image.lovechenfeng.com/nginx%E6%B7%BB%E5%8A%A0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png"></li><li>重启nginx</li></ol><ul><li>查看nginx pid号：<br><code>[root@localhost ~]# pe -ef | grep nginx</code></li><li>kill掉nginx进程：<br><code>[root@localhost ~]# kill -9 4748</code><br><code>[root@localhost ~]# kill -9 4749</code></li><li>启动nginx：<br><code>[root@localhost ~]# /usr/local/nginx/sbin/nginx</code><br><img src= "/img/loading.gif" data-lazy-src="http://image.lovechenfeng.com/%E9%87%8D%E5%90%AFnginx.png"></li></ul><ol start="3"><li>浏览器验证访问nginx<br>浏览器访问<a href="http://192.168.100.30,不停刷新,页面将在tomcat01和tomcat02两台服务器来回切换/">http://192.168.100.30,不停刷新，页面将在Tomcat01和Tomcat02两台服务器来回切换</a><br><img src= "/img/loading.gif" data-lazy-src="http://image.lovechenfeng.com/nginx%E6%B5%8B%E8%AF%9501.png"><br><img src= "/img/loading.gif" data-lazy-src="http://image.lovechenfeng.com/nginx%E6%B5%8B%E8%AF%9502.png"></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Nginx-Tomcat负载均衡实验&quot;&gt;&lt;a href=&quot;#Nginx-Tomcat负载均衡实验&quot; class=&quot;headerlink&quot; title=&quot;Nginx+Tomcat负载均衡实验&quot;&gt;&lt;/a&gt;Nginx+Tomcat负载均衡实验&lt;/h1&gt;&lt;h2 id=&quot;环</summary>
      
    
    
    
    <category term="云系统维护" scheme="http://www.ifunan.cn/categories/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/"/>
    
    
    <category term="负载均衡" scheme="http://www.ifunan.cn/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>php及phpMyAdmin安装与配置</title>
    <link href="http://www.ifunan.cn/2020/04/12/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4_Php/"/>
    <id>http://www.ifunan.cn/2020/04/12/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4_Php/</id>
    <published>2020-04-12T09:55:58.000Z</published>
    <updated>2020-08-30T09:48:52.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php及phpMyAdmin安装与配置"><a href="#php及phpMyAdmin安装与配置" class="headerlink" title="php及phpMyAdmin安装与配置"></a>php及phpMyAdmin安装与配置</h1><p>实验环境：CentOS 7<br>所需包：apr-1.6.5.tar.bz2、apr-util-1.6.1.tar.bz2、libmcrypt-2.5.6.tar.gz、php-5.5.38.tar.gz、phpMyAdmin-4.6.4-all-languages.tar.gz<br>概要：PHP即“超文本预处理器”，是一种<strong>通用开源脚本语言</strong>。PHP是在服务器端执行的脚本语言，与C语言类似，是常用的网站编程语言。PHP独特的语法混合了C、Java、Perl以及 PHP 自创的语法。利于学习，使用广泛，主要适用于Web开发领域。</p><h2 id="php的安装与配置"><a href="#php的安装与配置" class="headerlink" title="php的安装与配置"></a>php的安装与配置</h2><h3 id="安装httpd和php"><a href="#安装httpd和php" class="headerlink" title="安装httpd和php"></a>安装httpd和php</h3><p><code>[root@host01 ~]# yum groupinstall &quot;Development Tools&quot; -y</code><br><code>[root@host01 ~]# yum install pcre-devel openssl-devel -y</code></p><h3 id="安装APR"><a href="#安装APR" class="headerlink" title="安装APR"></a>安装APR</h3><p><code>[root@host01 ~]# wget http://mirrors.hust.edu.cn/apache/apr/apr-1.6.5.tar.bz2</code><br><a href="http://image.lovechenfeng.com/apr-1.6.5.tar.bz2">apr-1.6.5.tar.bz2</a><br><code>[root@host01 ~]# tar xf apr-1.6.5.tar.bz2</code><br><code>[root@host01 ~]# cd apr-1.6.5</code><br><code>[root@host01 apr-1.6.5]# ./configure --prefix=/usr/local/apr</code><br><code>[root@host01 apr-1.6.5]# make &amp;&amp; make install</code><br><code>[root@host01 apr-1.6.5]# cd ..</code></p><h3 id="安装APR-util"><a href="#安装APR-util" class="headerlink" title="安装APR-util"></a>安装APR-util</h3><p><code>[root@host01 ~]# wget http://mirrors.hust.edu.cn/apache/apr/apr-util-1.6.1.tar.bz2</code><br><a href="http://image.lovechenfeng.com/apr-util-1.6.1.tar.bz2">apr-util-1.6.1.tar.bz2</a><br><code>[root@host01 ~]# yum install expat-devel -y</code><br><code>[root@host01 ~]# tar xf apr-util-1.6.1.tar.bz2</code><br><code>[root@host01 ~]# cd apr-util-1.6.1</code><br><code>[root@host01 apr-util-1.6.1]# ./configure --prefix=/usr/local/apr-util  --with-apr=/usr/local/apr</code><br><code>[root@host01 apr-util-1.6.1]# make &amp;&amp; make install</code><br><code>[root@host01 apr-util-1.6.1]# cd ..</code></p><h3 id="安装httpd并启动测试"><a href="#安装httpd并启动测试" class="headerlink" title="安装httpd并启动测试"></a>安装httpd并启动测试</h3><p><code>[root@host01 ~]# wget http://mirrors.hust.edu.cn/apache/httpd/httpd-2.4.38.tar.bz2</code><br><code>[root@host01 ~]# tar xf httpd-2.4.38.tar.bz2</code><br><code>[root@host01 ~]# mv apr-1.6.5 httpd-2.4.38/srclib/apr</code><br><code>[root@host01 ~]# mv apr-util-1.6.1 httpd-2.4.38/srclib/apr-util</code><br><code>[root@host01 ~]# cd httpd-2.4.38</code><br>命令配置httpd：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@host01 httpd-2.4.38]# .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;apache \</span><br><span class="line">--sysconfdir&#x3D;&#x2F;etc&#x2F;httpd --enable-so --enable-ssl \</span><br><span class="line">--enable-cgi --enable-rewrite --with-zlib \</span><br><span class="line">--with-pcre--with-apr&#x3D;&#x2F;usr&#x2F;local&#x2F;apr \</span><br><span class="line">--with-apr-util&#x3D;&#x2F;usr&#x2F;local&#x2F;apr-util --enable-modules&#x3D;most \</span><br><span class="line">--enable-mpms-shared&#x3D;all --with-mpm&#x3D;event --with-included-apr</span><br></pre></td></tr></table></figure><p><code>[root@host01 httpd-2.4.38]# make &amp;&amp; make install</code><br><code>[root@host01 httpd-2.4.38]# cd ..</code><br>打开httpd配置文件<br><code>[root@host01 ~]# vi /etc/httpd/httpd.conf</code><br>添加内容：<code>ServerName 192.168.100.128:80</code><br>启动apache：<br><code>[root@host01 ~]# /usr/local/apache/bin/apachectl start</code></p><blockquote><p>启动成功有如下提示：<br>httpd (pid 42830) already running</p></blockquote><hr><blockquote><p>注：如若启动失败，可能是端口号冲突导致<br>解决办法：修改端口，ps -aux|grep nginx查看pid并kill掉</p><ol><li>安装netstat<br><code>yum install net-tools.x86_64 -y</code></li><li>查看占用80端口的进程<br><code>netstat -antp  |grep :80</code></li><li>查看nginx的pid<br><code>ps -A |grep nginx</code></li><li>杀死nginx的所有进程<br><code>kill -9 进程号</code></li></ol></blockquote><p>浏览器输入IP地址访问httpd测试（如若失败请关闭防火墙和SElinux再行测试)<br><img src= "/img/loading.gif" data-lazy-src="http://image.lovechenfeng.com/php_httpd.png"><br><code>[root@host01 ~]# cp /usr/local/apache/bin/apachectl /etc/init.d/httpd</code><br><code>[root@host01 ~]# chmod 700 /etc/init.d/httpd</code><br><code>[root@host01 ~]# vi /etc/init.d/httpd</code><br>添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">#Comments to support chkconfig on RedHat Linux</span><br><span class="line">#chkconfig: 2345 90 90</span><br><span class="line">#description:http server</span><br></pre></td></tr></table></figure><p>将httpd设置为开机自启动：<br><code>[root@host01 ~]# chkconfig --add httpd</code><br><code>[root@host01 ~]# chkconfig --level 2345 httpd on</code></p><h3 id="配置httpd服务"><a href="#配置httpd服务" class="headerlink" title="配置httpd服务"></a>配置httpd服务</h3><p>使用vi新建httpd脚本文件：<br><code>[root@host01 ~]# vi /etc/profile.d/httpd.sh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;apache&#x2F;bin</span><br></pre></td></tr></table></figure><p><code>[root@host01 ~]# . /etc/profile.d/httpd.sh</code></p><h3 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h3><p><code>[root@host01 ~]# yum install libxml2-devel bzip2-devel -y</code><br><code>[root@host01~]#wget ftp://mcrypt.hellug.gr/pub/crypto/mcrypt/libmcrypt/libmcrypt-2.5.6.tar.gz</code><br><a href="http://image.lovechenfeng.com/libmcrypt-2.5.6.tar.gz">libmcrypt-2.5.6.tar.gz</a><br><code>[root@host01 ~]# tar xf libmcrypt-2.5.6.tar.gz</code><br><code>[root@host01 ~]# cd libmcrypt-2.5.6</code><br><code>[root@host01 libmcrypt-2.5.6]# ./configure</code><br><code>[root@host01 libmcrypt-2.5.6]# make;make install</code><br><code>[root@host01 libmcrypt-2.5.6]# cd ..</code><br><code>[root@host01 ~]# wget http://am1.php.net/distributions/php-5.5.38.tar.gz</code><br><a href="http://image.lovechenfeng.com/libmcrypt-2.5.6.tar.gz">php-5.5.38.tar.gz</a><br><code>[root@host01 ~]# tar xf php-5.5.38.tar.gz</code><br><code>[root@host01 ~]# cd php-5.5.38</code><br>配置php：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@host01 php-5.5.38]# .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;php \</span><br><span class="line">--with-mysql&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql --with-openssl \</span><br><span class="line">--with-mysqli&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysql_config \</span><br><span class="line">--enable-mbstring --with-freetype-dir \</span><br><span class="line">--with-jpeg-dir --with-png-dir --with-zlib \</span><br><span class="line">--with-libxml-dir&#x3D;&#x2F;usr --enable-xml \</span><br><span class="line">--enable-sockets --with-apxs2&#x3D;&#x2F;usr&#x2F;local&#x2F;apache&#x2F;bin&#x2F;apxs \</span><br><span class="line">--with-mcrypt --with-config-file-path&#x3D;&#x2F;etc \</span><br><span class="line">--with-config-file-scan-dir&#x3D;&#x2F;etc&#x2F;php.d \</span><br><span class="line">--with-bz2 --enable-maintainer-zts --enable-fpm</span><br></pre></td></tr></table></figure><p><code>[root@host01 php-5.5.38]# make &amp;&amp; make install</code><br><code>[root@host01 php-5.5.38]# yum install –y php-fpm</code></p><blockquote><p>警告⚠：下列原始文件<code>php-fpm</code>错误，请直接替换新文件到<code>/etc/init.d/</code>目录下：</p></blockquote><p><a href="http://image.lovechenfeng.com/php-fpm">点我下载php-fpm</a><br><code>[root@host01 php-5.5.38]# cp ./sapi/fpm/init.d.php-fpm.in /etc/init.d/php-fpm</code><br><code>[root@host01 php-5.5.38]# chmod +x /etc/init.d/php-fpm</code><br><code>[root@host01 php-5.5.38]# chkconfig --add php-fpm</code><br><code>[root@host01 php-5.5.38]# chkconfig php-fpm on</code><br><code>[root@host01 php-5.5.38]# cd /usr/local/php/etc</code><br><code>[root@host01 etc]# cp php-fpm.conf.default php-fpm.conf</code><br><code>[root@host01 etc]# service php-fpm start</code></p><blockquote><p>注：<br>输出结果 Starting php-fpm  done则表示启动成功</p></blockquote><h3 id="配置httpd，使其支持php"><a href="#配置httpd，使其支持php" class="headerlink" title="配置httpd，使其支持php"></a>配置httpd，使其支持php</h3><p><code>[root@host01 etc]# cd /etc/httpd/</code><br><code>[root@host01 httpd]# vi httpd.conf</code><br>添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .php</span><br><span class="line">AddType application&#x2F;x-httpd-php-source .phps</span><br><span class="line">DirectoryIndex index.php index.html</span><br></pre></td></tr></table></figure><h3 id="验证php的支持"><a href="#验证php的支持" class="headerlink" title="验证php的支持"></a>验证php的支持</h3><p>重启apache和httpd：<br><code>[root@host01 httpd]# /usr/local/apache/bin/apachectl restart</code><br><code>[root@host01 httpd]# service httpd restart</code><br><code>[root@host01 httpd]# cd /usr/local/apache/htdocs</code><br><code>[root@host01 htdocs]# vi index.php</code><br>添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>浏览器访问192.168.100.128/index.php测试php：<br><img src= "/img/loading.gif" data-lazy-src="http://image.lovechenfeng.com/php_phpIndex.png"></p><h2 id="phpMyAdmin安装与配置"><a href="#phpMyAdmin安装与配置" class="headerlink" title="phpMyAdmin安装与配置"></a>phpMyAdmin安装与配置</h2><p>概要：phpMyAdmin，一款数据库管理工具，需在php基础上安装配置</p><h3 id="下载phpMyAdmin并连接MySQL"><a href="#下载phpMyAdmin并连接MySQL" class="headerlink" title="下载phpMyAdmin并连接MySQL"></a>下载phpMyAdmin并连接MySQL</h3><p><code>[root@host01 ~]# cd /usr/local/apache/htdocs</code><br><code>[root@host01htdocs]#wget https://files.phpmyadmin.net/phpMyAdmin/4.6.4/phpMyAdmin-4.6.4-all-languages.tar.gz</code><br><a href="http://image.lovechenfeng.com/phpMyAdmin-4.6.4-all-languages.tar.gz">phpMyAdmin-4.6.4-all-languages.tar.gz</a><br><code>[root@host01 htdocs]# tar xf phpMyAdmin-4.6.4-all-languages.tar.gz</code><br><code>[root@host01 htdocs]# ln -sv  phpMyAdmin-4.6.4-all-languages phpmyadmin</code><br>浏览器访问phpMyAdmin首页：<br><a href="http://ip地址/phpmyadmin/">http://IP地址/phpmyadmin/</a><br><img src= "/img/loading.gif" data-lazy-src="http://image.lovechenfeng.com/php_phpMyAdmin.png"></p><h3 id="修改phpMyAdmin的root密码"><a href="#修改phpMyAdmin的root密码" class="headerlink" title="修改phpMyAdmin的root密码"></a>修改phpMyAdmin的root密码</h3><p><code>[root@host01 ~]# cd /usr/local/apache/htdocs/phpmyadmin/libraries</code><br><code>[root@host01 libraries]# vi config.default.php</code><br>修改如下内容：<br>第519行： $cfg[‘Servers’][$i][‘AllowNoPassword’] = true;</p><blockquote><p>注：vim显示行数命令(命令模式下):set number<br>关闭行数显示:set nonumber<br>vim快速跳到指定行数命令(命令模式下):go 519</p></blockquote><p>配置后即可从web界面用root用户无密码登录管理界面<br><img src= "/img/loading.gif" data-lazy-src="http://image.lovechenfeng.com/php_pMAindex.png"><br><img src= "/img/loading.gif" data-lazy-src="http://image.lovechenfeng.com/php_pMAindex02.png"><br><img src= "/img/loading.gif" data-lazy-src="http://image.lovechenfeng.com/php_pMAindex03.png"><br>再次编辑config.default.php:<br><code>[root@host01 libraries]# vi config.default.php</code><br>修改如下内容：<br>第251行： $cfg[‘Servers’][$i][‘password’] = ‘123456’;<br>退出web界面，再使用  root/123456 重新登录，本地mysql数据库已经可以被phpMyAdmin正常显示了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;php及phpMyAdmin安装与配置&quot;&gt;&lt;a href=&quot;#php及phpMyAdmin安装与配置&quot; class=&quot;headerlink&quot; title=&quot;php及phpMyAdmin安装与配置&quot;&gt;&lt;/a&gt;php及phpMyAdmin安装与配置&lt;/h1&gt;&lt;p&gt;实验</summary>
      
    
    
    
    <category term="云系统维护" scheme="http://www.ifunan.cn/categories/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/"/>
    
    
    <category term="php" scheme="http://www.ifunan.cn/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat的安装与配置</title>
    <link href="http://www.ifunan.cn/2020/03/24/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4_Tomcat/"/>
    <id>http://www.ifunan.cn/2020/03/24/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4_Tomcat/</id>
    <published>2020-03-24T14:56:07.000Z</published>
    <updated>2020-08-30T09:48:52.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tomcat的安装与配置"><a href="#Tomcat的安装与配置" class="headerlink" title="Tomcat的安装与配置"></a>Tomcat的安装与配置</h1><p>实验环境：CentOS7<br>所需软件：apache-tomcat-7.0.90、jdk-7u80-linux-x64.tar、jenkins.war<br>概要：Tomcat是一个免费开源的Serlvet容器，是Apache基金会的Jakarta项目中的一个核心项目，由Apache、Sun和其他一些公司及个人共同开发而成。Tomcat是一个<strong>小型的轻量级应用服务器</strong>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP程序的首选<br>&emsp;&emsp;在Tomcat中，只需将WAR文件放入Tomcat的webapps目录下，Tomcat会自动检测这个文件，并将其解压。在浏览器输入应用的JSP地址即可访问</p><blockquote><p>注：Tomcat是按照JDK的更新版本来同步更新的，所以要保证Tomcat和JDK版本对应）</p></blockquote><h2 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h2><ol><li>检查jdk安装情况：<br><code>[root@localhost ~]# rpm -qa | grep jdk</code><br>最小化安装的系统没有安装jdk，如果有的虚拟机中已安装openJDK，请先卸载:<br><code>[root@localhost ~]# rpm -e java-1.7.0-openjdk（视自身情况而定）</code><br>上传jdk安装包jdk-7u80-linux-x64.tar.gz到/root目录</li><li>新建jvm目录：<br><code>[root@localhost ~]# mkdir -p /usr/lib/jvm</code></li><li>解压文件到jvm目录下：<br><code>[root@localhost ~]# tar -zxvf jdk-7u80-linux-x64.tar.gz -C /usr/lib/jvm</code></li><li>修改解压目录名称为java<br><code>[root@localhost ~]# cd /usr/lib/jvm/</code><br><code>[root@localhost jvm]# mv jdk1.7.0_80/ java</code></li></ol><h2 id="JDK环境配置"><a href="#JDK环境配置" class="headerlink" title="JDK环境配置"></a>JDK环境配置</h2><ol><li>在文件<code>/etc/profile</code>末尾加上以下环境变量：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java</span><br><span class="line">export JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre</span><br><span class="line">export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;lib</span><br><span class="line">export PATH&#x3D;$&#123;JAVA_HOME&#125;&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure></li><li>使环境变量生效：<br><code>[root@localhost jvm]# source /etc/profile</code></li><li>检查java安装结果：<br><code>[root@localhost jvm]# java -version</code><br>出现以下内容则表示安装成功<blockquote><p>java version “1.7.0_80”<br>Java(TM) SE Runtime Environment (build 1.7.0_80-b15)<br>Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode)</p></blockquote></li></ol><h2 id="安装部署Tomcat"><a href="#安装部署Tomcat" class="headerlink" title="安装部署Tomcat"></a>安装部署Tomcat</h2><ol><li>上传Tomcat安装包apache-tomcat-7.0.90.zip到/root目录：</li><li>解压文件：<br><code>[root@localhost ~]# unzip apache-tomcat-7.0.90.zip</code><blockquote><p>注：如提示unzip命令未找到，则执行<code>yum install unzip.x86_64 -y</code>安装unzip</p></blockquote></li><li>复制解压后的文件到/opt/tomcat：<br><code>[root@localhost ~]# cp -r apache-tomcat-7.0.90 /opt/tomcat</code></li><li>编辑启动脚本文件startup.sh，末尾添加以下内容（/opt/tomcat/bin）：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java</span><br><span class="line">JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre</span><br><span class="line">PATH&#x3D;$PATH:$&#123;JAVA_HOME&#125;&#x2F;bin:$&#123;JRE_HOME&#125;</span><br><span class="line">CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib&#x2F;rt.jar:$&#123;JAVA_HOME&#125;&#x2F;lib&#x2F;dt.jar:$&#123;JRE_HOME&#125;&#x2F;lib&#x2F;tools.jar</span><br><span class="line">TOMCAT_HOME&#x3D;&#x2F;opt&#x2F;tomcat</span><br></pre></td></tr></table></figure></li><li>编辑关闭脚本文件shutdown.sh，末尾添加以下内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java</span><br><span class="line">JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre</span><br><span class="line">PATH&#x3D;$PATH:$&#123;JAVA_HOME&#125;&#x2F;bin:$&#123;JRE_HOME&#125;</span><br><span class="line">CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib&#x2F;rt.jar:$&#123;JAVA_HOME&#125;&#x2F;lib&#x2F;dt.jar:$&#123;JRE_HOME&#125;&#x2F;lib&#x2F;tools.jar</span><br><span class="line">TOMCAT_HOME&#x3D;&#x2F;opt&#x2F;tomcat</span><br></pre></td></tr></table></figure></li><li>修改Tomcat的bin目录下.sh权限：<br><code>[root@localhost ~]# chmod u+x /opt/tomcat/bin/*.sh</code></li><li>启动Tomcat：<br><code>[root@localhost ~]# /opt/tomcat/bin/startup.sh</code><br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/24/8OMujI.png"></li><li>验证Tomcat安装启动结果（关闭防火墙和selinux）：<br>浏览器访问192.168.100.128:8080，如下图tomcat欢迎界面所示则表示配置成功。<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/24/8OMb2d.png"></li></ol><h2 id="打包发布jenkins"><a href="#打包发布jenkins" class="headerlink" title="打包发布jenkins"></a>打包发布jenkins</h2><ol><li>上传jenkins源码包jenkins.war到/opt/tomcat/webapps目录：</li><li>关闭tomcat：<br><code>/opt/tomcat/bin/shutdown.sh</code></li><li>启动tomcat：<br><code>/opt/tomcat/bin/startup.sh</code></li><li>浏览器访问192.168.100.128:8080/jenkins，如下图jenkins欢迎界面所示则表示配置成功：<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/24/8OQTe0.png"><br>在虚拟机服务器中复制密码<br><code>[root@localhost ~]# cat /root/.jenkins/secrets/initialAdminPassword</code><br>粘贴密码de067ef66c0846adb37f25998c09bf9d，登录。</li><li>选择安装插件<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/24/8O1S3Q.png"><br>点击安装推荐的插件<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/24/8O1iBq.png"><br>等待安装成功，即可进入jenkins主页面，自此Tomcat安装完成</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Tomcat的安装与配置&quot;&gt;&lt;a href=&quot;#Tomcat的安装与配置&quot; class=&quot;headerlink&quot; title=&quot;Tomcat的安装与配置&quot;&gt;&lt;/a&gt;Tomcat的安装与配置&lt;/h1&gt;&lt;p&gt;实验环境：CentOS7&lt;br&gt;所需软件：apache-to</summary>
      
    
    
    
    <category term="云系统维护" scheme="http://www.ifunan.cn/categories/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/"/>
    
    
    <category term="Tomcat" scheme="http://www.ifunan.cn/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>NFS在CentOS7下的安装与部署</title>
    <link href="http://www.ifunan.cn/2020/03/19/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4_NFS/"/>
    <id>http://www.ifunan.cn/2020/03/19/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4_NFS/</id>
    <published>2020-03-19T12:55:30.000Z</published>
    <updated>2020-08-30T09:48:52.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NFS在CentOS7下的安装与部署"><a href="#NFS在CentOS7下的安装与部署" class="headerlink" title="NFS在CentOS7下的安装与部署"></a>NFS在CentOS7下的安装与部署</h1><h2 id="NFS概要"><a href="#NFS概要" class="headerlink" title="NFS概要"></a>NFS概要</h2><p>NFS的主要功能是<strong>通过网络让不同的机器系统之间可以彼此共享文件和目录</strong><br>实际应用：在企业Web应用架构中，<strong>NFS网络文件系统</strong>一般用于存储共享的视频、图片、附件等静态资源，一般把网站上用户上传的文件都放在NFS共享里，然后前端所有节点访问这些静态资源时都会读取NFS上的资源</p><h2 id="NFS安装"><a href="#NFS安装" class="headerlink" title="NFS安装"></a>NFS安装</h2><p>NFS所需要的两个包：nfs-utils和rpcbind：<br><code>[root@localhost ~]# yum install -y nfs-utils rpcbind</code><br>检查是否安装成功(有显示软件名则表示安装成功，无显示表示失败）：<br><code>[root@localhost ~]# rpm -qa nfs-utils rpcbind</code></p><h2 id="rpcbind服务"><a href="#rpcbind服务" class="headerlink" title="rpcbind服务"></a>rpcbind服务</h2><p>概要：</p><ol><li>rpcbind是一个<strong>RPC</strong>服务，用于统一管理NFS端口的服务，并且统一对外的端口是111；RPC管理服务器端的NFS端口分配，客户端要传数据时，客户端的RPC会先向服务器端的RPC要服务器的端口，要到端口之后再建立连接，然后传输数据</li><li>NFS服务器端需要先启动RPC，再启动NFS，这样NFS才能到RPC去注册端口信息</li><li>如果RPC服务重新启动，原来已经注册好的NFS端口数据就会全部丢失，因此RPC服务管理的NFS程序也要重新启动以重新向RPC注册</li></ol><p>检查服务启动状态：<br><code>[root@localhost ~]# systemctl status rpcbind.service</code><br>rpcbind启动命令：<br><code>[root@localhost ~]# systemctl start rpcbind.service</code><br>查看系统中启用的端口：<br><code>[root@localhost ~]# netstat -lnt</code><br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/19/8syOl8.png"><br>检查rpc服务是否正常的显示信息：<br><code>[root@localhost ~]# rpcinfo -p localhost</code><br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/19/8s6Kt1.png"></p><h2 id="NFS服务"><a href="#NFS服务" class="headerlink" title="NFS服务"></a>NFS服务</h2><h3 id="启动NFS"><a href="#启动NFS" class="headerlink" title="启动NFS"></a>启动NFS</h3><p>启动NFS：<br><code>[root@localhost ~]# systemctl start nfs.service</code></p><blockquote><p>（注：要先启动rpcbind再启动nfs）</p></blockquote><p>查看服务启动的状态：<br><code>[root@localhost ~]# systemctl status nfs.service</code><br>设置两个服务开机自启动：<br><code>[root@localhost ~]# systemctl enable nfs.service</code><br><code>[root@localhost ~]# systemctl enable rpcbind.service</code></p><blockquote><p>CentOS以下版本命令：<code>chkconfig rpcbind on</code> 和 <code>chkconfig nfs on</code></p></blockquote><p>查看NFS服务自启动状态：<br><code>[root@localhost ~]#systemctl list-unit-files|grep enabled|grep rpcbind</code><br><code>[root@localhost ~]#systemctl list-unit-files|grep nfs</code></p><blockquote><p>CentOS7以下版本：<code>[root@localhost ~]# chkconfig --list | grep nfs</code></p></blockquote><h3 id="配置NFS"><a href="#配置NFS" class="headerlink" title="配置NFS"></a>配置NFS</h3><p>创建共享目录 ：<br><code>[root@localhost ~]# mkdir -p /data</code><br>修改权限，/data及子文件属主属组为nfsnobody：<br><code>[root@localhost ~]# chown -R nfsnobody:nfsnobody /data</code><br>查看修改后的权限：<br><code>[root@localhost ~]# ll -d /data</code><br>NFS服务配置文件路径为/etc/exports，默认为空，需添加:<br><code>[root@localhost ~]# vi /etc/exports</code><br>添加以下内容：<br><code>/data 192.168.100.0/24(rw,sync,all_squash)</code><br>重新加载以完成配置文件更新<br><code>[root@localhost ~]# exportfs -r</code></p><blockquote><p>CentOS7以下使用 ：<code>/etc/init.d/nfs reload ===exportfs –r</code>,s或者重新启动两个服务</p></blockquote><p>查看共享目录状态:<br><code>[root@localhost ~]# cat /var/lib/nfs/etab</code><br>挂载前检查本机有哪些共享的文件：<br><code>[root@localhost ~]# showmount -e 192.168.100.2</code><br>创建要挂载到本机的目录：<br><code>[root@localhost ~]# mkdir /mnt/nfs</code><br>将共享目录/data挂载到/mnt/目录：<br><code>[root@localhost ~]# mount -t nfs 192.168.100.128:/data /mnt</code><br>使用<code>df -h</code>查看挂载情况：<br><code>[root@localhost ~]# df -hs</code><br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/19/8y3esK.png"><br>检查结果，在/mnt目录下分别创建test目录及test.txt文件，如果在/data目录下能够正常访问，表明配置成功。</p><h2 id="Windows下挂载NFS"><a href="#Windows下挂载NFS" class="headerlink" title="Windows下挂载NFS"></a>Windows下挂载NFS</h2><ol><li>in+R打开运行窗口，输入<code>OptionalFeatures</code>打开Windows功能窗口，找到并勾选上NFS服务，点击确定</li><li>cmd查看远程服务器有哪些共享目录：<br><code>showmount -e 192.168.100.2</code></li><li><code>mount \\IP地址\nfs的目录  本地挂载点</code>挂载NFS<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/19/8yt5Mn.png"></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>出现端口错误的情况，一般是由于NFS先于RPC启动，导致了RPC没有提供端口号给NFS；一定要记住先启动RPC再启动NFS</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NFS在CentOS7下的安装与部署&quot;&gt;&lt;a href=&quot;#NFS在CentOS7下的安装与部署&quot; class=&quot;headerlink&quot; title=&quot;NFS在CentOS7下的安装与部署&quot;&gt;&lt;/a&gt;NFS在CentOS7下的安装与部署&lt;/h1&gt;&lt;h2 id=&quot;N</summary>
      
    
    
    
    <category term="云系统维护" scheme="http://www.ifunan.cn/categories/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/"/>
    
    
    <category term="NFS" scheme="http://www.ifunan.cn/tags/NFS/"/>
    
  </entry>
  
  <entry>
    <title>Openfiler在Web界面配置NFS和iSCSI</title>
    <link href="http://www.ifunan.cn/2020/03/13/%E4%BA%91%E5%AD%98%E5%82%A8_openfiler/"/>
    <id>http://www.ifunan.cn/2020/03/13/%E4%BA%91%E5%AD%98%E5%82%A8_openfiler/</id>
    <published>2020-03-13T11:57:57.000Z</published>
    <updated>2020-08-30T09:48:51.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Openfiler在Web界面配置NFS和iSCSI"><a href="#Openfiler在Web界面配置NFS和iSCSI" class="headerlink" title="Openfiler在Web界面配置NFS和iSCSI"></a>Openfiler在Web界面配置NFS和iSCSI</h1><h2 id="Openfiler概要"><a href="#Openfiler概要" class="headerlink" title="Openfiler概要"></a>Openfiler概要</h2><p>Openfiler是一个定制化的、基于Web方式进行存储管理的<strong>网络存储操作系统</strong>。Openfiler在单一框架中提供了<strong>基于文件</strong>的网络附加存储（Network Attached Storage）和<strong>基于块</strong>的存储区域网络（Storage Area Network）存储解决方案。<br>Openfiler通过将一些开源技术如Apache、LVM2、Ext 3、Linux NFS和iSCSI Enterprise Target等整合到一个统一的架构体系架构中，以一个基于Web方式功能强大的管理界面来提供虚拟存储功能。<br>Openfiler的强大之处在于对多种网络协议的支持，如下图所示：<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KGejH.png"></p><h2 id="NFS的配置"><a href="#NFS的配置" class="headerlink" title="NFS的配置"></a>NFS的配置</h2><h3 id="登录Web界面"><a href="#登录Web界面" class="headerlink" title="登录Web界面"></a>登录Web界面</h3><p>输入<code>https://ip:446</code>进入Openfiler的WEB管理界面,初始登录账号为openfiler,密码为password<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KG456.png"></p><h3 id="创建NAS卷"><a href="#创建NAS卷" class="headerlink" title="创建NAS卷"></a>创建NAS卷</h3><ol><li>Volumes-右侧的Block Devices创建分区。选择一个磁盘并单击磁盘名称进入<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KJpRS.png"><br>进入后将Partition Type选择为Physical volume，在Ending cylinder处设置大小，完成后点击Create。<blockquote><p>注：在Openfiler 2.99.1版本上可能存在”Create”不成功的情况，需要把“Starting cylinder”默认值的基础上增加80个cylinders。<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KJWQg.png"></p></blockquote></li><li>Volumes-右侧Volume Groups创建卷组。填写VG name<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KJOlF.png"></li><li>Volumes-右侧的Add Volume添加卷。选择刚刚创建的卷组，然后设置卷name，再选择卷大小，完成后create<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KYmTI.png"></li></ol><h3 id="配置NFS存储服务"><a href="#配置NFS存储服务" class="headerlink" title="配置NFS存储服务"></a>配置NFS存储服务</h3><ol><li>Services-右侧的Manage Services启动NFS服务，将NFS Server的Boot Status选项设置为Enabled状态，Current Status选项设置为Running状态<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KY2A1.png"></li><li>Shares-右侧的Existing Shares编辑共享文件夹。点击刚刚创建的卷名称，弹出窗口填写共享文件夹名称<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KYynJ.png"><br>点击共享文件夹名称，在弹出的窗口中直接点击左下角的Make Share按钮<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KYTnH.png"><br>设置共享文件夹的别名，然后设置访问模式为匿名访问，点击update生效设置<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KtFNq.png"></li><li>System-右侧的Network Setup添加访问控制列表，设置Access的name，填写能访问NAS的IP网段，以及Netmask，再将Type选项设置为Share，完成之后点击update<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KtrPP.png"></li><li>Shares-点击共享文件夹名称，在Host access configuration中配置外部主机连接的服务权限，将NFS设置为RW（读写），点击update生效<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8Kthan.png"></li><li>NFS验证是否成功，可查看可挂载的NAS存储<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KtvI1.png"></li><li>Windows下挂载NFS（此处需要开启Windows专业版才能使用的NFS服务）<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/05/12/Ytn3Dg.png"><blockquote><p>命令详解：mount \NFS的IP地址或者主机名\nfs目录名 挂载点<br>例如此处的挂载命令为：mount \192.168.200.101\mnt\volume_group_nas19\volume_nas19\nas_fn\ g:</p></blockquote></li></ol><h3 id="配置FTP连接NFS存储"><a href="#配置FTP连接NFS存储" class="headerlink" title="配置FTP连接NFS存储"></a>配置FTP连接NFS存储</h3><ol><li>Shares-Host access configuration中修改服务权限。将FTP服务设置为RW（读写）权限，点击update生效<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KNPMD.png"></li><li>Services-Manage Services中启动FTP服务。将FTP Server状态设置为Enabled和Running<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KNFqH.png"></li><li>在Windows资源管理器中验证FTP服务，用户名为openfiler，密码为password<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KNmJP.png"><br>命令行方式验证<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KNtJ0.png"></li></ol><h2 id="iSCSI的配置"><a href="#iSCSI的配置" class="headerlink" title="iSCSI的配置"></a>iSCSI的配置</h2><ol><li>System-右侧Network Setup添加访问控制列表<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KN6F1.png"></li><li>Volumes-右侧Block Devices，选择一个磁盘添加iSCSI卷，创建新的分区（如果没有反应，将Starting cylinder选项下的数字加80再进行创建即可）<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KNIwd.png"></li><li>Volumes-右侧的Volume Groups创建一个卷组。填写卷组的名称，选中pv所在的磁盘<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KNX6S.png"></li><li>Volumes-右侧的Add Volume新建卷。依次的操作为，选择刚刚创建的VG；填写卷的名称；对卷做一个 说明；设置卷的大小 （可在Manage Vollumes选项中删除卷）；设置文件系统（如果没有设置为block,则后边不能LUN，以及Windows能挂在上但查看不到磁盘）<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KUPf0.png"></li><li>Services选项卡启动iSCSI target服务，使之系统能对外提供基于iSCSI协议的虚拟存储服务<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KUm79.png"></li><li>Volumes-右侧的iscs Targets添加一个iSCSI target。进入后点击add，进入后在LUN Mapping开启映射；进入Network ACL点击创建的iSCSI规则，将Access选项设置为Allow<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KU8XD.png"><br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KUUAA.png"></li></ol><h3 id="Windows挂载iSCSI并验证"><a href="#Windows挂载iSCSI并验证" class="headerlink" title="Windows挂载iSCSI并验证"></a>Windows挂载iSCSI并验证</h3><ol><li>Services-右侧的iSCSI Target Setup。添加Discovery CHAP user，注意密码一定要设复杂，否则windows将因为密码安全规则无法连接iSCSI(此处的账号和密码在Windows挂载时有会用到)<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KUWhq.png"></li><li>Volumes——iSCSI Targets——CHAP Authentication添加CHAP user to  target，密码 也要有复杂度（此处的账号和密码在Windows连接iSCSI时也会用到）<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KUIjU.png"></li><li>使用Windows验证iSCSI。在Windows打开控制面板——管理工具——iSCSI发起程序；点击 发现——发现分户，输入服务器IP<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KU7B4.png"><br>然后点开高级，做如下配置(注：这里的发现程序IP为自身的IP地址，非服务器的IP地址)<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KUO41.png"></li><li>添加完成后，再切换到目标，点击刷新，即可看见iSCSI，点击连接–&gt;高级，添加CHAP user to target做如下配置，完成后，可以看到状态变为已连接，说明已经连接成功<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KUzjO.png"><br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8KzJM9.png"></li><li>控制面板——管理工具——计算机管理——磁盘管理可查看到iSCSI，格式化挂载后 即可使用<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/03/13/8Kzaa6.png"></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Openfiler在Web界面配置NFS和iSCSI&quot;&gt;&lt;a href=&quot;#Openfiler在Web界面配置NFS和iSCSI&quot; class=&quot;headerlink&quot; title=&quot;Openfiler在Web界面配置NFS和iSCSI&quot;&gt;&lt;/a&gt;Openfile</summary>
      
    
    
    
    <category term="云存储技术" scheme="http://www.ifunan.cn/categories/%E4%BA%91%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Openfiler" scheme="http://www.ifunan.cn/tags/Openfiler/"/>
    
  </entry>
  
  <entry>
    <title>MySQL在Centos7下的安装与配置</title>
    <link href="http://www.ifunan.cn/2020/03/10/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4_Mysql/"/>
    <id>http://www.ifunan.cn/2020/03/10/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4_Mysql/</id>
    <published>2020-03-10T11:23:00.000Z</published>
    <updated>2020-08-30T09:48:51.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL在Centos7下的安装与配置"><a href="#MySQL在Centos7下的安装与配置" class="headerlink" title="MySQL在Centos7下的安装与配置"></a>MySQL在Centos7下的安装与配置</h1><h2 id="MySQL概要"><a href="#MySQL概要" class="headerlink" title="MySQL概要"></a>MySQL概要</h2><p>MySQL是一种<strong>关联数据库系统</strong>，<strong>关联数据库</strong>将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就<strong>增加了速度</strong>并<strong>提高了灵活性</strong>。MySQL分为社区版和商业版，由于其性能高、成本低、可靠性好，而被用于在Internet上的中小型网站中。</p><table><thead><tr><th align="center">MySQL安装方法</th><th align="center">在线安装</th><th align="center">二进制包安装</th><th align="center">源码安装</th><th align="center">自定制安装</th></tr></thead><tbody><tr><td align="center">优点</td><td align="center">简单，安装快；适合初学者学习使用</td><td align="center">安装简单，安装路径灵活；一台服务器可以安装多个MySQL</td><td align="center">根据需要可定制编译，路径灵活；一台服务器可以安装多个MySQL；<strong>性能最好</strong></td><td align="center">结合在线和源码安装的优点，将源码制作成符合要求的安装包，放到仓库里实现在线安装</td></tr><tr><td align="center">缺点</td><td align="center">无法定制，安装路径不灵活，默认路径不能修改，一台服务器只能安装一个MySQL</td><td align="center">已经经过编译，性能不如源码编译的好；不能灵活定制编译参数</td><td align="center">安装过程相对复杂；编译时间较长</td><td align="center">&emsp;</td></tr></tbody></table><h2 id="MySQL安装与配置"><a href="#MySQL安装与配置" class="headerlink" title="MySQL安装与配置"></a>MySQL安装与配置</h2><h3 id="创建mysql用户和账号"><a href="#创建mysql用户和账号" class="headerlink" title="创建mysql用户和账号"></a>创建mysql用户和账号</h3><p>添加mysql组：<br><code>groupadd mysql</code><br>添加mysql用户账号：<br><code>useradd  -s /sbin/nologin -g mysql -M mysql</code></p><table><thead><tr><th align="center">useradd参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-s /sbin/nologin</td><td align="center">只创建用户角色，禁止用户登录操作系统，增加安全</td></tr><tr><td align="center">-g mysql</td><td align="center">创建mysql用户属于mysql组</td></tr><tr><td align="center">-M</td><td align="center">不创建用户家目录</td></tr></tbody></table><h3 id="创建mysql数据存放目录"><a href="#创建mysql数据存放目录" class="headerlink" title="创建mysql数据存放目录"></a>创建mysql数据存放目录</h3><p><code>[root@host01~]# mkdir -pv /mydata/data</code><br><code>[root@host01~]# cd /mydata</code><br><code>[root@host01 mydata]# chown -R mysql:mysql data/</code><br><code>[root@host01 mydata]# chmod 710 data/</code></p><h3 id="安装并初始化MySQL，使用通过二进制格式的MySQL"><a href="#安装并初始化MySQL，使用通过二进制格式的MySQL" class="headerlink" title="安装并初始化MySQL，使用通过二进制格式的MySQL"></a>安装并初始化MySQL，使用通过二进制格式的MySQL</h3><p>安装mysql初始化所需的依赖库：<br><code>[root@host01 mysql]# yum install libaio perl perl-devel –y</code><br>下载mysql包，参数-c表示开启断点续传：<br><code>[root@host01 mysql]# wget -c https://cdn.mysql.com/archives/mysql-5.6/mysql-5.6.32-linux-glibc2.5-x86_64.tar.gz</code><br><a href="http://www.baidu.com/">如下载较慢，请点我在线下载包</a><br>解压下载好的包到/mydata目录下，注:要将包移动到路径下再解压：<br><code>[root@host01 mysql]# tar -zxvf mysql-5.6.32-linux-glibc2.5-x86_64.tar.gz</code><br><code>[root@host01 mysql]# cd /usr/local/</code><br>创建mysql软连接：<br><code>[root@host01 local]# ln -sv /mydata/mysql-5.6.32-linux-glibc2.5-x86_64 mysql</code><br><code>[root@host01 local]# cd mysql</code><br><code>[root@host01 mysql]# chown -R mysql.mysql .</code><br>执行脚本初始化MySQL：<br><code>[root@host01 mysql]# ./scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/mydata/data/</code></p><blockquote><p>如提示错误如下：<br>[root@localhost mysql]#  ./scripts/mysql_install_db –user=mysql –basedir=/usr/local/mysql –datadir=/mydata/data/<br>FATAL ERROR: please install the following Perl modules before executing ./scripts/mysql_install_db:<br>Data::Dumper<br>解决方法：<code>yum install autoconf</code>安装Data:Dumper模块。为了安全，需要把mysql目录下文件属主更改回root用户<code>chown -R root.root .</code></p></blockquote><h3 id="修改MySQL服务脚本及配置文件"><a href="#修改MySQL服务脚本及配置文件" class="headerlink" title="修改MySQL服务脚本及配置文件"></a>修改MySQL服务脚本及配置文件</h3><p>拷贝MySQL服务 脚本并设置开机启动:<br><code>[root@host01 mysql]# cp ./support-files/mysql.server /etc/init.d/mysqld</code><br><code>[root@host01 mysql]# chmod +x /etc/init.d/mysqld</code><br><code>[root@host01 mysql]# chkconfig --add mysqld</code><br><code>[root@host01 mysql]# chkconfig  mysqld on</code><br>查看MySQL开机启动代码：<br><code>[root@host01 mysql]# chkconfig --list mysqld</code><br>mysqld          0:off   1:off   2:on    3:on    4:on    5:on    6:off<br><code>[root@host01 mysql]# mkdir /var/log/mysql</code><br><code>[root@host01 mysql]# mkdir /var/run/mysql</code><br>修改mysql配置文件datadir数据目录位置：<br><code>[root@host01 mysql]# vi /etc/my.cnf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">datadir&#x3D;&#x2F;mydata&#x2F;data</span><br><span class="line">log-error&#x3D;&#x2F;var&#x2F;log&#x2F;mysql&#x2F;mysqld.log</span><br><span class="line">pid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid</span><br></pre></td></tr></table></figure><h3 id="启动mysql服务"><a href="#启动mysql服务" class="headerlink" title="启动mysql服务"></a>启动mysql服务</h3><p><code>[root@host01 mysql]# systemctl start mysqld</code><br><code>[root@host01 mysql]# netstat -tnlp | grep 3306</code></p><blockquote><p>此处如报错：命令未找到,请执行命令安装此工具<code>yum install -y net-tools</code></p></blockquote><h3 id="为mysql添加PATH环境变量"><a href="#为mysql添加PATH环境变量" class="headerlink" title="为mysql添加PATH环境变量"></a>为mysql添加PATH环境变量</h3><p>新建vi文件，添加内容：<br><code>[root@host01 mysql]# vi /etc/profile.d/mysql.sh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin</span><br></pre></td></tr></table></figure><p>添加权限：<br><code>[root@host01 mysql]# chmod +x /etc/profile.d/mysql.sh</code><br>执行mysql.sh：<br><code>[root@host01 mysql]# . /etc/profile.d/mysql.sh</code></p><h3 id="为mysql添加man帮助及输出头文件和库文件"><a href="#为mysql添加man帮助及输出头文件和库文件" class="headerlink" title="为mysql添加man帮助及输出头文件和库文件"></a>为mysql添加man帮助及输出头文件和库文件</h3><p>安装man（或man-pages-zh-CN.noarch）：<br><code>[root@host01 mysql]# yum install man -y</code><br>修改配置文件，有的系统中这个文件的名称为man_db.conf：</p><blockquote><p>注：如您的文件为man_db.conf，则下方添加的内容应该为<code>MANDATORY_MANPATH  /usr/local/mysql/man</code></p></blockquote><p><code>[root@host01 mysql]# vi /etc/man.config</code><br><code>MANPATH /usr/local/mysql/man</code><br><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2020/03/10/8iyt58.png"><br>验证mysql的man帮助文件：<br><code>[root@host01 mysql]# man mysql</code><br>添加软链接：<br><code>[root@host01 mysql]# ln -sv /usr/local/mysql/include/ /usr/include/mysql</code><br>新建配置文件，添加内容：<br><code>[root@host01 mysql]# vi /etc/ld.so.conf.d/mysql-x86_64.conf</code><br><code>/usr/local/mysql/lib</code><br>查看动态链接库：<br><code>[root@host01 mysql]# ldconfig -v</code><br>建立软链接：<br><code>[root@host01 mysql]# ln -s /var/lib/mysql/mysql.sock /tmp/mysql.sock</code><br>登录mysql,没有设置密码，所以直接回车即可：<br><code>[root@host01 mysql]# mysql -u root -p</code><br>默认无密码，可登录mysql后设置密码<br><code>set password for root@localhost = password(&#39;000000&#39;);</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL在Centos7下的安装与配置&quot;&gt;&lt;a href=&quot;#MySQL在Centos7下的安装与配置&quot; class=&quot;headerlink&quot; title=&quot;MySQL在Centos7下的安装与配置&quot;&gt;&lt;/a&gt;MySQL在Centos7下的安装与配置&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="云系统维护" scheme="http://www.ifunan.cn/categories/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/"/>
    
    
    <category term="MySQL" scheme="http://www.ifunan.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Centos 7下搭建Hadoop（单机伪分布式）</title>
    <link href="http://www.ifunan.cn/2020/03/05/%E5%A4%A7%E6%95%B0%E6%8D%AE_Hadoop%E5%AE%89%E8%A3%85/"/>
    <id>http://www.ifunan.cn/2020/03/05/%E5%A4%A7%E6%95%B0%E6%8D%AE_Hadoop%E5%AE%89%E8%A3%85/</id>
    <published>2020-03-05T05:42:35.000Z</published>
    <updated>2020-08-30T09:48:52.956Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CentOS6-7-下搭建Hadoop2-7-1-单机伪分布式环境"><a href="#CentOS6-7-下搭建Hadoop2-7-1-单机伪分布式环境" class="headerlink" title="CentOS6.7 下搭建Hadoop2.7.1 单机伪分布式环境"></a>CentOS6.7 下搭建Hadoop2.7.1 单机伪分布式环境</h1><h2 id="开始搭建前配置环境"><a href="#开始搭建前配置环境" class="headerlink" title="开始搭建前配置环境"></a>开始搭建前配置环境</h2><ol><li>配置IP地址<br><code>cd /etc/sysconfig/network-scripts/</code><br><code>vi ifcfg-eno16777736(网卡名视情况而定)</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">TYPE&#x3D;&quot;Ethernet&quot;</span><br><span class="line">BOOTPROTO&#x3D;static</span><br><span class="line">DEFROUTE&#x3D;&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL&#x3D;&quot;no&quot;</span><br><span class="line">IPV6INIT&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL&#x3D;&quot;no&quot;</span><br><span class="line">NAME&#x3D;&quot;eno16777736&quot;</span><br><span class="line">UUID&#x3D;&quot;dfdf7864-58bb-403c-a422-6f721fb8c391&quot;</span><br><span class="line">DEVICE&#x3D;&quot;eno16777736&quot;</span><br><span class="line">ONBOOT&#x3D;&quot;yes&quot;</span><br><span class="line">IPADDR&#x3D;&quot;192.168.30.50&quot;</span><br><span class="line">PREFIX&#x3D;&quot;24&quot;</span><br><span class="line">GATEWAY&#x3D;&quot;192.168.30.1&quot;</span><br><span class="line">IPV6_PEERDNS&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_PEERROUTES&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_PRIVACY&#x3D;&quot;no&quot;</span><br><span class="line">&#96;&#96;&#96;&#96;</span><br><span class="line">2. 配置网关</span><br><span class="line">&#96;vim &#x2F;etc&#x2F;sysconfig&#x2F;network&#96;</span><br></pre></td></tr></table></figure>NETWORKING = yes<br>HOSTNAME = Hadoop.Master<br>GATEWAY = 192.168.30.1<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&#96;systemctl restart network&#96;</span><br><span class="line">3. 设置hosts文件</span><br><span class="line">&#96;vi &#x2F;etc&#x2F;hosts&#96;</span><br><span class="line">在文件添入以下内容:</span><br><span class="line">&#96;192.168.30.50Hadoop.Master&#96;</span><br><span class="line">4. 配置yum源，安装自动补全等</span><br><span class="line">&#96;mkdir &#x2F;opt&#x2F;repo&#96;</span><br><span class="line">&#96;mv &#x2F;etc&#x2F;yum.repos.d&#x2F;* &#x2F;opt&#x2F;repo&#x2F;&#96;</span><br><span class="line">&#96;vi &#x2F;etc&#x2F;yum.repos.d&#x2F;local.repo&#96;</span><br><span class="line">&#96;mkdir &#x2F;mnt&#x2F;centos&#96;</span><br><span class="line">将镜像文件传入根目录中进行挂载</span><br><span class="line">&#96;mount &#x2F;CentOS-7-x86_64-DVD-1511.iso &#x2F;mnt&#x2F;centos&#x2F;&#96;</span><br><span class="line">安装vim和自动补全，然后重新登录以生效</span><br><span class="line">&#96;yum install vim bash-completion -y&#96;</span><br><span class="line"></span><br><span class="line">## 添加Hadoop用户 ##</span><br><span class="line"></span><br><span class="line">1. 添加用户组</span><br><span class="line">&#96;groupadd hadoop&#96;</span><br><span class="line">2. 添加用户并分配到用户组</span><br><span class="line">&#96;useradd -g hadoop hadoop&#96;</span><br><span class="line">3. 修改hadoop用户密码</span><br><span class="line">&#96;passwd hadoop&#96;</span><br><span class="line"></span><br><span class="line">## 关闭防火墙 ##</span><br><span class="line"></span><br><span class="line">1. 关闭防火墙</span><br><span class="line">&#96;systemctl stop firewalld.service&#96;</span><br><span class="line">2. 关闭防火墙自启动</span><br><span class="line">&#96;chkconfig firewalld off&#96;</span><br><span class="line">3. 关闭Selinux</span><br><span class="line">&#96;vim &#x2F;etc&#x2F;sysconfig&#x2F;selinux&#96;</span><br><span class="line">（修改如下内容）</span><br><span class="line">&#96;SELINUX&#x3D;disabled&#96;</span><br><span class="line">4. 使SElinux立即生效，参数0是宽容模式(Prmissive)，参数1是强制模式(Enforcing)</span><br><span class="line">&#96;setenforce 0&#96;</span><br><span class="line">查看Selinux状态，</span><br><span class="line">&#96;getenforce&#96;</span><br><span class="line"></span><br><span class="line">## SSH无密码配置 ##</span><br><span class="line"></span><br><span class="line">1. 查看ssh与rsync安装状态（没有显示结果则表示没有安装，需执行步骤2安装）</span><br><span class="line">&#96;rpm -qa|grep openssh&#96;</span><br><span class="line">&#96;rpm -qa|grep rsync&#96;</span><br><span class="line">2. 安装ssh与rsync</span><br><span class="line">&#96;yum -y install ssh&#96;</span><br><span class="line">&#96;yum -y install rsync&#96;</span><br><span class="line">3. 切换hadoop用户</span><br><span class="line">&#96;su hadoop&#96;</span><br><span class="line">4. 生成SSH密码对</span><br><span class="line">&#96;ssh-keygen -t rsa -P &#39;&#39; -f ~&#x2F;.ssh&#x2F;id_rsa&#96;</span><br><span class="line">5. 将id_dsa.pub追加到授权的key中</span><br><span class="line">&#96;cat ~&#x2F;.ssh&#x2F;id_rsa.pub &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys&#96;</span><br><span class="line">6. 设置授权key权限</span><br><span class="line">&#96;chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys&#96;</span><br><span class="line">7. 测试ssh连接</span><br><span class="line">&#96;ssh localhost&#96;</span><br><span class="line"></span><br><span class="line">## 安装JAVA ##</span><br><span class="line"></span><br><span class="line">1. 安装</span><br><span class="line">首先检查当前系统是否有jdk</span><br><span class="line">&#96;rpm -qa|grep java&#96;</span><br><span class="line">如果有，则需要卸载(卸载以java开头，后跟数字版本号的)</span><br><span class="line">&#96;rpm -e –nodeps [包名]&#96;</span><br><span class="line">&gt; eg: rpm -e --nodeps java-1.7.0-openjdk-1.7.0.141-2.6.10.5.el7.x86_64</span><br><span class="line"></span><br><span class="line">2. 安装java</span><br><span class="line">[点我下载JDK](http:&#x2F;&#x2F;www.baidu.com)</span><br><span class="line">&#96;rpm –ivh jdk-8u162-linux-x64.rpm&#96;</span><br><span class="line">3. 配置（在配置文件最下方添加配置）</span><br><span class="line">&#96;vi &#x2F;etc&#x2F;profile&#96;</span><br><span class="line">（在配置文件最下方添加配置，注意第一行最后边的jdk版本号要和自己的版本号相同）</span><br></pre></td></tr></table></figure>export JAVA_HOME=/usr/java/jdk1.8.0_162<br>export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib<br>export PATH=$PATH:$JAVA_HOME/bin<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">3. 使配置文件生效</span><br><span class="line">&#96;source &#x2F;etc&#x2F;profile&#96;</span><br><span class="line">4. 测试环境变量设置，如最后一句执行完成后有显示版本号则安装完成</span><br><span class="line">&#96;java&#96;</span><br><span class="line">&#96;javac&#96;</span><br><span class="line">&#96;java -version&#96;</span><br><span class="line">参考链接：https:&#x2F;&#x2F;www.linuxidc.com&#x2F;Linux&#x2F;2018-03&#x2F;151326.htm</span><br><span class="line"></span><br><span class="line">## Hadoop安装与配置 ##</span><br><span class="line"></span><br><span class="line">1. 将压缩包上传至&#x2F;home&#x2F;hadoop目录</span><br><span class="line">[点我下载Hadoop](http:&#x2F;&#x2F;www.baidu.com)</span><br><span class="line">&#96;mv hadoop-2.7.1.tar.gz &#x2F;home&#x2F;hadoop&#96;</span><br><span class="line">2. 将压缩包解压至&#x2F;usr目录</span><br><span class="line">&#96;tar zxvf &#x2F;home&#x2F;hadoop&#x2F;hadoop-2.7.1.tar.gz -C &#x2F;usr&#x2F;&#96;</span><br><span class="line">3. 修改文件夹名称</span><br><span class="line">&#96;mv &#x2F;usr&#x2F;hadoop-2.7.1&#x2F; &#x2F;usr&#x2F;hadoop&#96;</span><br><span class="line">4. 创建hadoop数据目录</span><br><span class="line">&#96;mkdir &#x2F;usr&#x2F;hadoop&#x2F;tmp&#96;</span><br><span class="line">5. 将hadoop文件夹授权给hadoop用户</span><br><span class="line">&#96;chown -R hadoop:hadoop &#x2F;usr&#x2F;hadoop&#x2F;&#96;</span><br><span class="line">6. 设置环境变量</span><br><span class="line">&#96;vi &#x2F;etc&#x2F;profile&#96; </span><br><span class="line">（追加如下内容）</span><br></pre></td></tr></table></figure>export HADOOP_HOME=/usr/hadoop<br>export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin<br>export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native<br>export HADOOP_OPTS=”-Djava.library.path=$HADOOP_HOME/lib”<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">7. 使环境变量生效</span><br><span class="line">&#96;source &#x2F;etc&#x2F;profile&#96;</span><br><span class="line">8. 测试环境变量设置</span><br><span class="line">&#96;hadoop version&#96;</span><br><span class="line">（最先错误测试失败，可能是版本跟不上的原因，要保证Hadoop和JDK版本正确）</span><br><span class="line"></span><br><span class="line">## 配置HDFS ##</span><br><span class="line"></span><br><span class="line">1. 切换至Hadoop用户</span><br><span class="line">&#96;su – hadoop&#96;</span><br><span class="line">2. 修改hadoop-env.sh</span><br><span class="line">&#96;cd &#x2F;usr&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;&#96;</span><br><span class="line">&#96;vi hadoop-env.sh&#96;</span><br><span class="line">（修改如下内容）</span><br><span class="line">&#96;export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_162&#96;</span><br><span class="line">3. 修改core-site.xml</span><br><span class="line">&#96;vi core-site.xml&#96; </span><br><span class="line">(添加如下内容)</span><br></pre></td></tr></table></figure><configuration> <property>     <name>fs.defaultFS</name>     <value>hdfs://Hadoop.Master:9000</value> </property> <property>     <name>hadoop.tmp.dir</name>     <value>/usr/hadoop/tmp/</value>     <description>A base for other temporary directories.</description> </property></configuration><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4. 修改hdfs-site.xml</span><br><span class="line">&#96;vi hdfs-site.xml&#96;</span><br><span class="line">(添加如下内容)</span><br></pre></td></tr></table></figure><configuration> <property>     <name>dfs.replication</name>     <value>1</value> </property></configuration><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">5. 格式化hdfs（状态为1表示格式化失败，失败可能的原因：环境配置和xml修改错误）</span><br><span class="line">&#96;hdfs namenode –format&#96;</span><br><span class="line">注：出现Exiting with status 0即为成功</span><br><span class="line">6. 启动hdfs</span><br><span class="line">&#96;start-dfs.sh&#96;</span><br><span class="line">(停止命令)&#96;stop-dfs.sh&#96;</span><br><span class="line">&gt; 注：输出如下内容，则启动成功</span><br><span class="line">WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class="line">Starting namenodes on [Hadoop.Master]</span><br><span class="line">Hadoop.Master: starting namenode, logging to &#x2F;usr&#x2F;hadoop&#x2F;logs&#x2F;hadoop-hadoop-namenode-Hadoop.Master.out</span><br><span class="line">Hadoop.Master: starting datanode, logging to &#x2F;usr&#x2F;hadoop&#x2F;logs&#x2F;hadoop-hadoop-datanode-Hadoop.Master.out</span><br><span class="line">Starting secondary namenodes [0.0.0.0]</span><br><span class="line">The authenticity of host &#39;0.0.0.0 (0.0.0.0)&#39; can&#39;t be established.</span><br><span class="line">RSA key fingerprint is .</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)? yes</span><br><span class="line">0.0.0.0: Warning: Permanently added &#39;0.0.0.0&#39; (RSA) to the list of known hosts.</span><br><span class="line">0.0.0.0: starting secondarynamenode, logging to &#x2F;usr&#x2F;hadoop&#x2F;logs&#x2F;hadoop-hadoop-secondarynamenode-Hadoop.Master.out</span><br><span class="line">WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicab</span><br><span class="line">7. 查看进程</span><br><span class="line">&#96;jps&#96;</span><br><span class="line">&gt; 注：输出类似如下内容</span><br><span class="line">1763 NameNode</span><br><span class="line">1881 DataNode</span><br><span class="line">2146 Jps</span><br><span class="line">2040 SecondaryNameNode</span><br><span class="line">8. 使用web查看Hadoop运行状态</span><br><span class="line">http:&#x2F;&#x2F;你的服务器ip地址:50070&#x2F;</span><br><span class="line">![](https:&#x2F;&#x2F;s2.ax1x.com&#x2F;2020&#x2F;03&#x2F;05&#x2F;3TzHmt.png)</span><br><span class="line">9. 在HDFS上运行WordCount</span><br><span class="line">创建HDFS用户目录：</span><br><span class="line">&#96;hdfs dfs -mkdir &#x2F;user&#96;</span><br><span class="line">根据自己的情况调整&#x2F;user&#x2F;(username):</span><br><span class="line">&#96;hdfs dfs -mkdir &#x2F;user&#x2F;hadoop&#96; </span><br><span class="line">复制输入文件（要处理的文件）到HDFS上:</span><br><span class="line">&#96;hdfs dfs -put &#x2F;usr&#x2F;hadoop&#x2F;etc&#x2F;hadoop &#x2F;input&#96;</span><br><span class="line">查看我们复制到HDFS上的文件:</span><br><span class="line">&#96;hdfs dfs -ls &#x2F;input&#96;</span><br><span class="line">运行单词检索（grep）程序（注意自己安装的Hadoop包名):</span><br><span class="line">&#96;hadoop jar &#x2F;usr&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-examples-2.7.3.jar grep &#x2F;input &#x2F;output &#39;dfs[a-z.]+&#39;&#96;</span><br><span class="line">&gt; (WordCount</span><br><span class="line">&#96;hadoop jar &#x2F;usr&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-examples-2.7.3.jar wordcount &#x2F;input &#x2F;output&#96;</span><br><span class="line">说明：output文件夹如已经存在则需要删除或指定其他文件夹。)</span><br><span class="line"></span><br><span class="line">错误1：input和output指定错误;解决办法:在前边加上根目录&#x2F;</span><br><span class="line">![](https:&#x2F;&#x2F;s2.ax1x.com&#x2F;2020&#x2F;03&#x2F;11&#x2F;8kTmwT.png)</span><br><span class="line">错误2：&#x2F;output文件已经存在;解决办法:须删去HDFS下的&#x2F;output然后再执行</span><br><span class="line">![](https:&#x2F;&#x2F;s2.ax1x.com&#x2F;2020&#x2F;03&#x2F;11&#x2F;8kbemt.png)</span><br><span class="line">查看运行结果：</span><br><span class="line">&#96;hdfs dfs -cat &#x2F;output&#x2F;*&#96;</span><br><span class="line">使用web方式登录验证，点击Utilities下边选择Browse the file system ，在下边找到name为output的文件，点开后如有下图所示文件，则表示成功</span><br><span class="line">![](https:&#x2F;&#x2F;s2.ax1x.com&#x2F;2020&#x2F;03&#x2F;11&#x2F;8kb51H.png)</span><br><span class="line"></span><br><span class="line">### 配置YARN</span><br><span class="line"></span><br><span class="line">修改mapred-site.xml:</span><br><span class="line">&#96;cd &#x2F;usr&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;&#96;</span><br><span class="line">&#96;cp mapred-site.xml.template mapred-site.xml&#96;</span><br><span class="line">&#96;vi mapred-site.xml&#96;</span><br><span class="line">(添加如下内容)</span><br></pre></td></tr></table></figure><configuration> <property>     <name>mapreduce.framework.name</name>     <value>yarn</value> </property></configuration><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修改yarn-site.xml：</span><br><span class="line">&#96;vi yarn-site.xml&#96;</span><br><span class="line">(添加如下内容)</span><br></pre></td></tr></table></figure><configuration> <property>     <name>yarn.nodemanager.aux-services</name>     <value>mapreduce_shuffle</value> </property></configuration>```启动YARN：`start-yarn.sh`(停止yarn stop-yarn.sh)查看当前java进程：`jps`> (输出如下)4918 ResourceManager1663 NameNode1950 SecondaryNameNode5010 NodeManager5218 Jps1759 DataNode</li></ol><p>运行mapReduce程序：<br>配置好如上配置再运行mapReduce程序时即是yarn中运行<br>使用web查看Yarn运行状态：<br>http://服务器ip地址:8088/<br><img src= "/img/loading.gif" data-lazy-src="https://s2.ax1x.com/2020/03/11/8kLwQJ.png"></p><h3 id="HDFS常用命令"><a href="#HDFS常用命令" class="headerlink" title="HDFS常用命令"></a>HDFS常用命令</h3><ol><li>创建HDFS文件夹<br>在根目录创建input文件夹：<br><code>hdfs dfs -mkdir -p /input</code><br>在用户目录创建input文件夹：<br>说明：如果不指定“/目录”，则默认在用户目录创建文件夹<br><code>hdfs dfs -mkdir -p input</code><br>(等同于 <code>hdfs dfs -mkdir -p /user/hadoop/input</code>)</li><li>查看HDFS文件夹<br>查看HDFS根文件夹：<br><code>hdfs  dfs  -ls /</code><br>查看HDFS用户目录文件夹：<br><code>hdfs  dfs  -ls</code><br>查看HDFS用户目录文件夹下input文件夹：<br><code>hdfs  dfs  -ls input</code><br>(等同与 <code>hdfs dfs -ls /user/hadoop/input</code>)</li><li>复制文件到HDFS<br><code>hdfs dfs -put /usr/hadoop/etc/hadoop input</code></li><li>删除文件夹<br><code>hdfs  dfs  -rm -r input</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CentOS6-7-下搭建Hadoop2-7-1-单机伪分布式环境&quot;&gt;&lt;a href=&quot;#CentOS6-7-下搭建Hadoop2-7-1-单机伪分布式环境&quot; class=&quot;headerlink&quot; title=&quot;CentOS6.7 下搭建Hadoop2.7.1 单</summary>
      
    
    
    
    <category term="大数据处理与应用" scheme="http://www.ifunan.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="Hadoop" scheme="http://www.ifunan.cn/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Nginx单点部署</title>
    <link href="http://www.ifunan.cn/2020/03/05/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4_Nginx/"/>
    <id>http://www.ifunan.cn/2020/03/05/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4_Nginx/</id>
    <published>2020-03-05T02:41:48.000Z</published>
    <updated>2020-08-30T09:48:52.346Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx的单点部署"><a href="#nginx的单点部署" class="headerlink" title="nginx的单点部署"></a>nginx的单点部署</h1><h2 id="安装配置nginx"><a href="#安装配置nginx" class="headerlink" title="安装配置nginx"></a>安装配置nginx</h2><ol><li>安装编译器<br><code>[root@host01 ~]# rpm -qa | grep  gcc</code><br><code>[root@host01 ~]# yum  install -y gcc openssl-devel pcre-devel zlib-devel lsof</code><br><code>[root@host01 ~]# yum install wget -y</code></li><li>安装配置nginx<br><code>[root@host01 ~]# groupadd -r nginx</code><br><code>[root@host01 ~]# useradd -r -g nginx -s /sbin/nologin -M nginx</code><br><code>[root@host01 ~]# mkdir -pv /var/tmp/nginx</code><br><a href="http://image.lovechenfeng.com/HTML_nginx.tar.gz.html">点我下载Nginx包到本地</a><br><code>[root@host01 ~]# wget http://nginx.org/download/nginx-1.10.1.tar.gz</code><br><code>[root@host01 ~]# tar -zxvf nginx-1.10.1.tar.gz</code><br><code>[root@host01 ~]# cd nginx-1.10.1</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host01 nginx-1.10.1]# .&#x2F;configure  --user&#x3D;nginx  --group&#x3D;nginx  --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx  --conf-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf  --error-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log  --http-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  --pid-path&#x3D;&#x2F;var&#x2F;run&#x2F;nginx&#x2F;nginx.pid  --lock-path&#x3D;&#x2F;var&#x2F;lock&#x2F;nginx.lock  --with-http_stub_status_module  --with-http_ssl_module  --with-http_gzip_static_module  --with-pcre</span><br></pre></td></tr></table></figure><code>[root@host01 nginx-1.10.1]# make &amp;&amp; make install</code><br><code>[root@host01 nginx-1.10.1]# ./configure --help</code></li></ol><h2 id="启动验证Nginx"><a href="#启动验证Nginx" class="headerlink" title="启动验证Nginx"></a>启动验证Nginx</h2><ol><li><p>检查配置文件:<br><code>[root@host01 nginx-1.10.1]# /usr/local/nginx/sbin/nginx -t</code></p><blockquote><p>出现以下内容表示成功<br>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok<br>nginx: configuration file /etc/nginx/nginx.conf test is successful</p></blockquote></li><li><p>启动Nginx服务:<br><code>[root@host01 nginx-1.10.1]# /usr/local/nginx/sbin/nginx</code></p></li><li><p>验证Nginx服务:<br><code>[root@host01 nginx-1.10.1]# lsof -i:80</code></p><blockquote><p>COMMAND  PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME<br>nginx   3808  root    6u  IPv4  22095      0t0  TCP *:http (LISTEN)<br>nginx   3809 nginx    6u  IPv4  22095      0t0  TCP *:http (LISTEN)</p></blockquote></li></ol><p><code>[root@host01 ~]# wget 127.0.0.1</code><br><code>[root@host01 ~]# curl 127.0.0.1</code><br>4. 使用Windows验证（windows打不开则关闭防护墙）：<br>输入服务器IP地址，出现Welcom to nginx!则表示成功</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;nginx的单点部署&quot;&gt;&lt;a href=&quot;#nginx的单点部署&quot; class=&quot;headerlink&quot; title=&quot;nginx的单点部署&quot;&gt;&lt;/a&gt;nginx的单点部署&lt;/h1&gt;&lt;h2 id=&quot;安装配置nginx&quot;&gt;&lt;a href=&quot;#安装配置nginx&quot; c</summary>
      
    
    
    
    <category term="云系统维护" scheme="http://www.ifunan.cn/categories/%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/"/>
    
    
    <category term="Nginx" scheme="http://www.ifunan.cn/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>LVM逻辑卷管理</title>
    <link href="http://www.ifunan.cn/2020/03/02/%E4%BA%91%E5%AD%98%E5%82%A8_LVM/"/>
    <id>http://www.ifunan.cn/2020/03/02/%E4%BA%91%E5%AD%98%E5%82%A8_LVM/</id>
    <published>2020-03-02T04:28:59.000Z</published>
    <updated>2020-08-30T09:48:51.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LVM逻辑卷的管理"><a href="#LVM逻辑卷的管理" class="headerlink" title="LVM逻辑卷的管理"></a>LVM逻辑卷的管理</h1><p>LVM(Logical Volume Manager)是建立在硬盘和分区之上的一个逻辑层,主要用来提高磁盘分区管理的灵活性，可以动态地调整磁盘分区的大小</p><h2 id="LVM基本概念"><a href="#LVM基本概念" class="headerlink" title="LVM基本概念"></a>LVM基本概念</h2><p>PV(Physical Volume,物理卷)<br>&emsp;整个硬盘，或使用fdisk等工具建立的普通分区<br>&emsp;包括许多默认4MB大小的PE(Physical Extent,基本单元),可以修改默认值的大小</p><p>VG(Volume Group,卷组)<br>&emsp;一个或多个物理卷组合而成的整体</p><p>LV(Logical Volume,逻辑卷)<br>&emsp;从卷组中分割出的一块空间，用于建立文件系统<br>思路：PV——VG——LV——格式化文件系统——挂载使用</p><h2 id="LVM管理命令"><a href="#LVM管理命令" class="headerlink" title="LVM管理命令"></a>LVM管理命令</h2><table><thead><tr><th align="center">功能</th><th align="center">物理卷</th><th align="center">卷组</th><th align="center">逻辑卷</th></tr></thead><tbody><tr><td align="center">Scan(扫描,查看)</td><td align="center">pvscan</td><td align="center">vgscan</td><td align="center">lvscan</td></tr><tr><td align="center">Create</td><td align="center">pvcreate</td><td align="center">vgcreate</td><td align="center">lvcreate</td></tr><tr><td align="center">Display</td><td align="center">pvdisplay</td><td align="center">vgdisplay</td><td align="center">lvdisplay</td></tr><tr><td align="center">Remove</td><td align="center">pvremove</td><td align="center">vgremove</td><td align="center">lvremove</td></tr><tr><td align="center">Extend(扩展容量)</td><td align="center">&emsp;</td><td align="center">vgextend</td><td align="center">lvextend</td></tr><tr><td align="center">Reduce(减小容量)</td><td align="center">&emsp;</td><td align="center">vgreduce</td><td align="center">lvreduce</td></tr></tbody></table><p>主要命令：</p><ul><li><code>pvcreate 设备名</code></li><li><code>vgcreate 自定义卷组名 物理卷名1 物理卷名2</code>&emsp;&emsp;//vgcreate myvg /dev/sdb[1-2]</li><li><code>lvcreate -L 大小 -n 自定义逻辑卷名 卷组名1</code></li><li><code>lvextend -L +大小 /dev/卷组名/逻辑卷名(相当于逻辑卷的路径)</code></li><li><code>resize2fs 逻辑卷路径</code>&emsp;&emsp;&emsp;&emsp;//扩容逻辑卷后需要更新文件系统的信息</li><li><code>lvreduce -L -大小 逻辑卷路径</code></li></ul><h2 id="命令的详细用方法"><a href="#命令的详细用方法" class="headerlink" title="命令的详细用方法"></a>命令的详细用方法</h2><ol><li><code>partx /dev/sdb</code>        &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;  使内核重新读取分区并查看分区信息</li></ol><p><strong>物理卷：</strong><br>2. <code>pvcreate /dev/sdb1 /dev/sdb2</code>        &emsp;&emsp;&emsp;  使用两个分区创建物理卷<br>3. <code>pvs</code> 查看所有创建的物理卷 &emsp; <code>pvdisplay</code> 查看物理卷详细信息  &emsp; <code>pvscan</code> 扫描物理卷<br>4. <code>pvremove /dev/sdb1</code>    &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;  删除物理卷<br><strong>卷组：</strong><br>5. <code>vgcreate myvg /dev/sdb[1-2]</code>    &emsp;&emsp;&emsp; 创建卷组，将两个物理卷添加进来<br><code>vgcreate -s 16m myvg /dev/sdb[1-2]</code>    &emsp; 创建卷组时指定PE大小<br>6. <code>vgs</code>  查看所有创建的卷组 &emsp; <code>vgdisplay</code> 查看卷组详细信息 &emsp; <code>vgscan</code> 扫描卷组<br>7. 注：要删除卷组中物理卷时，先转移数据    <code>pvmove /dev/sdb1</code><br>然后再缩减卷组大小        <code>vgreduce myvg /dev/sdb1</code><br>8. <code>vgextend myvg /dev/sdb1</code>    &emsp;&emsp;&emsp;&emsp;&emsp; 添加物理卷到卷组中<br>9. <code>vgremove myvg</code>    &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; 删除卷组<br><strong>逻辑卷：</strong><br>10. <code>lvcreate -L+5G -n mylv myvg</code>    &emsp;&emsp;&emsp;&emsp; 创建逻辑卷,-L指定大小,-n指定逻辑卷名称<br>11. <code>lvremove [逻辑卷路径]</code>        &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; 删除逻辑卷<br>12. <code>fdisk -l</code> 查看创建的逻辑卷    <code>mkfs.ext4 [逻辑卷路径]</code> 格式化逻辑卷，挂载使用<br>13. 注：卷扩容    <code>lvextend -L+1G [逻辑卷路径]</code><br>逻辑卷扩容后要对文件系统扩容    <code>resize2fs [逻辑卷路径]</code><br>卷缩减(步骤:先取消挂载LV;再缩减LV大小;最后再格式化一次才能重新挂载 &emsp; <code>lvreduce -L-3G [逻辑卷路径]</code>)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LVM逻辑卷的管理&quot;&gt;&lt;a href=&quot;#LVM逻辑卷的管理&quot; class=&quot;headerlink&quot; title=&quot;LVM逻辑卷的管理&quot;&gt;&lt;/a&gt;LVM逻辑卷的管理&lt;/h1&gt;&lt;p&gt;LVM(Logical Volume Manager)是建立在硬盘和分区之上的一个逻</summary>
      
    
    
    
    <category term="云存储技术" scheme="http://www.ifunan.cn/categories/%E4%BA%91%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="云存储技术" scheme="http://www.ifunan.cn/tags/%E4%BA%91%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>一文让你看懂IaaS、PaaS和SaaS</title>
    <link href="http://www.ifunan.cn/2020/02/28/%E9%9A%8F%E6%89%8B%E8%AE%B0_%E4%BA%91%E8%AE%A1%E7%AE%97%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.ifunan.cn/2020/02/28/%E9%9A%8F%E6%89%8B%E8%AE%B0_%E4%BA%91%E8%AE%A1%E7%AE%97%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-02-28T04:06:02.000Z</published>
    <updated>2020-08-30T09:48:53.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一文让你看懂IaaS、PaaS和SaaS"><a href="#一文让你看懂IaaS、PaaS和SaaS" class="headerlink" title="一文让你看懂IaaS、PaaS和SaaS"></a>一文让你看懂IaaS、PaaS和SaaS</h1><p>在与相关人士聊云计算的时候，有时会从他们的最终蹦出诸如IaaS、PaaS和SaaS等相关名词，听的人一头雾水，而往往与你聊的人，也只能用一些专业名字来解释，这样一来，就更加疑惑了。</p><p>那么IaaS、PaaS和SaaS到底是什么，本文就用最通俗的语言来说透，这些高大上的概念到底是什么？</p><h3 id="用饺子来看IaaS、PaaS和SaaS"><a href="#用饺子来看IaaS、PaaS和SaaS" class="headerlink" title="用饺子来看IaaS、PaaS和SaaS"></a>用饺子来看IaaS、PaaS和SaaS</h3><p>作为一个中国人，相信很多人都喜欢吃饺子、包子、油条、豆浆。但是如果想要自己做，就是一个非常麻烦的事情。</p><p>以饺子为例，这时候需要准备好面粉，剁好的馅料，再调配好需要的配料，还得等面粉发酵完毕后和面。同时还要准备好煤气、蒸屉、砧板等厨具，还要有自己的餐桌与餐具。包好饺子放进蒸屉之中，蒸好后才能享用。</p><p>所有东西都是自己准备，因此这就叫做<strong>本地部署（On-Premises）</strong>。</p><p>当然如果觉得麻烦，可以直接去超市买别人做好的冻饺子，回家里直接热热就可以吃了。这时候只需要准备好锅与煤气灶，还有餐桌、厨具就好了。</p><p>与在自己家里面做不同，这里需要一个饺子的供应商，这就是<strong>基础设施即服务（IaaS）</strong>。</p><p>但还是感到有些麻烦，那么可以直接打个电话，叫一家卖饺子的餐厅直接把做好的热腾腾的饺子送过来，你只需要准备餐桌就好了。这就叫做<strong>平台即服务（PaaS）</strong>。</p><p>如果什么都不想准备，甚至连桌子都懒得整理的话，就直接去饺子店吃好了。那里什么都已经准备好了。这就是<strong>软件及服务（SaaS）</strong>。</p><p>总结一下，现在你有四种途径可以吃到饺子，要么自己把一切材料准备好，在家里面做；要么买现成的回来热热吃；要么叫个外卖；要么就去店里面吃。</p><h3 id="云计算的三个层次"><a href="#云计算的三个层次" class="headerlink" title="云计算的三个层次"></a>云计算的三个层次</h3><p>好了，估计各位对这些概念有一个大概的印象了，那么现在忘记饺子。</p><p>假设有这么一加技术超牛的公司，根本就不需要别人来提供服务，自己拥有基础设施、应用等等，可以把他们分为三层：基础设施（infrastructure）、平台（platform）和软件（software）。</p><p>基础设施主要包括网络系统（networking）、存储设备（storage）、服务器（servers）、虚拟化技术（virtualization）；而平台则在基础设施之上，还包括操作系统（OS）、中间件（middleware）以及运行库（runtime）；而软件，则在平台的基础上，还添加了数据（date）与应用（application）。</p><p>这其实是云计算的三个分层，基础设施在最末端，平台在中间，软件则在顶层，分别是Infrastructure-as-a-Service(IaaS)、Platform-as-a-Service(PaaS)、Software-as-a-Service(SaaS)，而别的一些“层”可以在它们之上继续添加。</p><p>如今这家公司什么都有，因此处在本地部署（On-Premises）的状态中。如果要想在公司网站上运行企业应用，则需要去购买服务器，后者一些别的高昂设备来控制本地应用，以保证业务得以运作。</p><p>假如有一天，这家公司的老板觉得，只是吃顿饺子而已，有必要又是买灶台，又是买蒸屉，何必非要自己做呢？于是这个时候，就要准备寻找一家云服务提供商，那么这家提供商需要有哪些服务呢？</p><p>主要提供的云服务也就是云计算的三个分层，IaaS、PaaS和SaaS，就像是饺子店给你提供的三种服务，打包、外卖和去店里面吃。</p><h3 id="IaaS、PaaS和SaaS就是云计算的三种服务"><a href="#IaaS、PaaS和SaaS就是云计算的三种服务" class="headerlink" title="IaaS、PaaS和SaaS就是云计算的三种服务"></a>IaaS、PaaS和SaaS就是云计算的三种服务</h3><p>因此现在可以具体来说说这三种服务。</p><ul><li>IaaS也就是基础设施即服务（Infrastructure-as-a-Service），拥有了IaaS，就可以将引荐外包到别的地方去。IaaS公司会提供场外服务器，存储和网络硬件，也可以选择租用。节省了维护成本和办公场地，公司可以在任何时候利用这些硬件来运行其应用。<br>目前比较知名的IaaS公司有亚马逊、Bluelock、CSC、GoGrid、IBM等。</li></ul><ul><li>PaaS即软件即服务（Platform-as-a-Service），某些时候也被叫作中间件。所有的开发都可以在这一层进行，节省时间与资源。PaaS公司可以提供各种开发和分发应用的解决方案，比如虚拟服务器和操作系统等，可以节省硬件上的费用。<br>PaaS公司与IaaS公司有许多重叠，除了上面列出的那些之外，还有Google、Microsoft Azure、Force.com、,Heroku、Engine Yard等。</li></ul><ul><li>SaaS则是软件即服务（Software-as-a-Service），也是我们目前普通用户接触最多的层面，在网络上任意一个远程服务器上的应用都是属于SaaS。比如现在阿里的钉钉、JIBUU以及苹果的iCloud都属于这一类。<br>比较知名的SaaS公司有Salesforce、workday、Slack等。</li></ul><p>小结</p><p>总的来说，IaaS、PaaS和SaaS就是云服务提供的三种层次，最基础的是IaaS，中间的为PaaS，直观呈现出来的是SaaS。</p><p>转自：<a href="https://cloud.51cto.com/art/201802/565858.htm">https://cloud.51cto.com/art/201802/565858.htm</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一文让你看懂IaaS、PaaS和SaaS&quot;&gt;&lt;a href=&quot;#一文让你看懂IaaS、PaaS和SaaS&quot; class=&quot;headerlink&quot; title=&quot;一文让你看懂IaaS、PaaS和SaaS&quot;&gt;&lt;/a&gt;一文让你看懂IaaS、PaaS和SaaS&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="随手记" scheme="http://www.ifunan.cn/tags/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux—FTP服务器</title>
    <link href="http://www.ifunan.cn/2020/02/25/%E9%9A%8F%E6%89%8B%E8%AE%B0_Linux_FTP/"/>
    <id>http://www.ifunan.cn/2020/02/25/%E9%9A%8F%E6%89%8B%E8%AE%B0_Linux_FTP/</id>
    <published>2020-02-25T10:25:43.000Z</published>
    <updated>2020-08-30T09:48:53.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux—FTP服务器"><a href="#Linux—FTP服务器" class="headerlink" title="Linux—FTP服务器"></a>Linux—FTP服务器</h1><h3 id="ftp没修改任何配置，突然访问需要输入密码，已经将ftp服务器迁移"><a href="#ftp没修改任何配置，突然访问需要输入密码，已经将ftp服务器迁移" class="headerlink" title="ftp没修改任何配置，突然访问需要输入密码，已经将ftp服务器迁移"></a>ftp没修改任何配置，突然访问需要输入密码，已经将ftp服务器迁移</h3><blockquote><p>反馈ftp没修改任何配置，突然访问需要输入密码，已经将ftp服务器迁移</p></blockquote><p>拿到问题之后，心想可能是配置文件有问题，于是按照正常服务器的配置文件copy了一份，重启ftp服务，依然需要输入密码</p><p><code>service vsftpd restart</code>后检查/etc/passwd，怀疑ftp用户被删除了，无法匿名登陆，同样修改ftp目录，依然无解。</p><p><strong>后面检查ftp挂载的目录，发现权限配置是777，修改为755之后，一切就正常了。</strong></p><p>END：在Linux里，经常会碰到文件权限修改导致的类似问题，比如id_rsa如果不是0600，就无法通过免密访问目标机器。</p><p>转自：<a href="https://blog.csdn.net/u011350541/article/details/80656797">https://blog.csdn.net/u011350541/article/details/80656797</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux—FTP服务器&quot;&gt;&lt;a href=&quot;#Linux—FTP服务器&quot; class=&quot;headerlink&quot; title=&quot;Linux—FTP服务器&quot;&gt;&lt;/a&gt;Linux—FTP服务器&lt;/h1&gt;&lt;h3 id=&quot;ftp没修改任何配置，突然访问需要输入密码，已经将</summary>
      
    
    
    
    <category term="Linux" scheme="http://www.ifunan.cn/categories/Linux/"/>
    
    
    <category term="随手记" scheme="http://www.ifunan.cn/tags/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>随手记点儿</title>
    <link href="http://www.ifunan.cn/2020/02/22/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    <id>http://www.ifunan.cn/2020/02/22/%E9%9A%8F%E6%89%8B%E8%AE%B0/</id>
    <published>2020-02-22T12:12:12.000Z</published>
    <updated>2020-08-30T09:48:53.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="随手记点儿"><a href="#随手记点儿" class="headerlink" title="随手记点儿"></a>随手记点儿</h1><h2 id="CMD命令"><a href="#CMD命令" class="headerlink" title="CMD命令"></a>CMD命令</h2><ul><li>查看连接过的WIFI密码<br><code>netsh wlan show profiles</code>查看所有连接过的WIFI<br><code>netsh wlan show profiles name=&quot;WIFI名称&quot; key=clear</code>填写账号获得密码</li></ul><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="http://ftp.lovechenfeng.com/main.html?download&weblink=7cba78ef4016ef3e8e3530b71130e545&realfilename=$E7$99$BE$E5$BA$A6$E4$BA$91.xlsx">百度云超级会员账号&amp;WIN10密钥</a></p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p><a href="http://ftp.lovechenfeng.com/main.html?download&weblink=a3b8c134e9337a6201e52e18a980a8d3&realfilename=antss1.2.9.zip">VPN</a><br><a href="http://ftp.lovechenfeng.com/main.html?download&weblink=c773da5074172d9074fdd788fb5bdc35&realfilename=eclipse-java-oxygen-2-win32-x86_64.zip">eclipse</a><br><a href="http://ftp.lovechenfeng.com/main.html?download&weblink=5376631fa094ac282b9c6b9209e18e39&realfilename=internet_download_manager_6.33.2.zip">IDM</a><br><a href="http://ftp.lovechenfeng.com/main.html?download&weblink=725ef3e77d585ed02e541c6e428ace39&realfilename=MarkdownPad$2B2.rar">MarkdownPad2</a><br><a href="http://ftp.lovechenfeng.com/main.html?download&weblink=a6d01dabe70c59c3a79be5cb6934f6e9&realfilename=75.0.3770.100_chrome_installer_X32.exe">chrome</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;随手记点儿&quot;&gt;&lt;a href=&quot;#随手记点儿&quot; class=&quot;headerlink&quot; title=&quot;随手记点儿&quot;&gt;&lt;/a&gt;随手记点儿&lt;/h1&gt;&lt;h2 id=&quot;CMD命令&quot;&gt;&lt;a href=&quot;#CMD命令&quot; class=&quot;headerlink&quot; title=&quot;CMD</summary>
      
    
    
    
    
    <category term="随手记" scheme="http://www.ifunan.cn/tags/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
  </entry>
  
</feed>
